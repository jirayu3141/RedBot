
RedBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000010c4  00001158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080011e  0080011e  00001176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001690  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2f  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd6  00000000  00000000  0000380f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  000044e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  000048dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b60  00000000  00000000  00005073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005bd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
       4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      1c:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_7>
      20:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_8>
      24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      2c:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_11>
      30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_14>
      3c:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_15>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      68:	e3 00       	.word	0x00e3	; ????
      6a:	e7 00       	.word	0x00e7	; ????
      6c:	eb 00       	.word	0x00eb	; ????
      6e:	ef 00       	.word	0x00ef	; ????
      70:	f3 00       	.word	0x00f3	; ????
      72:	f7 00       	.word	0x00f7	; ????
      74:	fb 00       	.word	0x00fb	; ????

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf ef       	ldi	r28, 0xFF	; 255
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	11 e0       	ldi	r17, 0x01	; 1
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	e4 ec       	ldi	r30, 0xC4	; 196
      8a:	f0 e1       	ldi	r31, 0x10	; 16
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	ae 31       	cpi	r26, 0x1E	; 30
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	21 e0       	ldi	r18, 0x01	; 1
      9a:	ae e1       	ldi	r26, 0x1E	; 30
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	a3 3e       	cpi	r26, 0xE3	; 227
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 85 01 	call	0x30a	; 0x30a <main>
      ac:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <ADC_Init>:
/* Function Definitions */
void ADC_Init(void) {
	// The Power Reduction ADC bit in the Power Reduction Register (PRR0.PRADC) must be written to '0' in order to enable the ADC.
	//PRR0 = (0 << PRADC);
	
	ADMUX = 0b000;			// Select channel ADC6
      b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b111;			// 128x prescaler
      b8:	ea e7       	ldi	r30, 0x7A	; 122
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	87 e0       	ldi	r24, 0x07	; 7
      be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// Enable
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <ADC_SetChannel>:
}

void ADC_SetChannel(uint8_t channel) {
	ADMUX = 0b01000000 | channel;
      c8:	80 64       	ori	r24, 0x40	; 64
      ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
      ce:	08 95       	ret

000000d0 <ADC_ReadRaw>:
}

unsigned int ADC_ReadRaw(void) {
	// Start conversion
	ADCSRA |= (1 << ADSC);
      d0:	ea e7       	ldi	r30, 0x7A	; 122
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	80 64       	ori	r24, 0x40	; 64
      d8:	80 83       	st	Z, r24
	
	// Wait until conversion finished
	loop_until_bit_is_clear(ADCSRA, ADSC);
      da:	80 81       	ld	r24, Z
      dc:	86 fd       	sbrc	r24, 6
      de:	fd cf       	rjmp	.-6      	; 0xda <ADC_ReadRaw+0xa>
	
	return ADC;
      e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
      e8:	08 95       	ret

000000ea <ADC_ReadVoltage>:

double ADC_ReadVoltage(void) {
	unsigned int raw = ADC_ReadRaw();
      ea:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_ReadRaw>
	return raw * (5.0/1024);
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 74 06 	call	0xce8	; 0xce8 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	40 ea       	ldi	r20, 0xA0	; 160
      fe:	5b e3       	ldi	r21, 0x3B	; 59
     100:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
     104:	08 95       	ret

00000106 <Control_Loop>:
static float pre_error = 0;
static float speed = 0;


/* Function Definitions */
void Control_Loop() {
     106:	4f 92       	push	r4
     108:	5f 92       	push	r5
     10a:	6f 92       	push	r6
     10c:	7f 92       	push	r7
     10e:	8f 92       	push	r8
     110:	9f 92       	push	r9
     112:	af 92       	push	r10
     114:	bf 92       	push	r11
     116:	cf 92       	push	r12
     118:	df 92       	push	r13
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
	/* Process sensor input and determine next state */
	pre_error = error;
     122:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <error>
     126:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <error+0x1>
     12a:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <error+0x2>
     12e:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <error+0x3>
     132:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <__data_end>
     136:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <__data_end+0x1>
     13a:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <__data_end+0x2>
     13e:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <__data_end+0x3>
	error = (_sensors_current.voltages[2] - _sensors_current.voltages[1]) - (_sensors_current.voltages[0] - _sensors_current.voltages[1]);
     142:	cd e3       	ldi	r28, 0x3D	; 61
     144:	d1 e0       	ldi	r29, 0x01	; 1
     146:	8c 80       	ldd	r8, Y+4	; 0x04
     148:	9d 80       	ldd	r9, Y+5	; 0x05
     14a:	ae 80       	ldd	r10, Y+6	; 0x06
     14c:	bf 80       	ldd	r11, Y+7	; 0x07
     14e:	a5 01       	movw	r20, r10
     150:	94 01       	movw	r18, r8
     152:	68 85       	ldd	r22, Y+8	; 0x08
     154:	79 85       	ldd	r23, Y+9	; 0x09
     156:	8a 85       	ldd	r24, Y+10	; 0x0a
     158:	9b 85       	ldd	r25, Y+11	; 0x0b
     15a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     15e:	2b 01       	movw	r4, r22
     160:	3c 01       	movw	r6, r24
     162:	a5 01       	movw	r20, r10
     164:	94 01       	movw	r18, r8
     166:	68 81       	ld	r22, Y
     168:	79 81       	ldd	r23, Y+1	; 0x01
     16a:	8a 81       	ldd	r24, Y+2	; 0x02
     16c:	9b 81       	ldd	r25, Y+3	; 0x03
     16e:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     172:	9b 01       	movw	r18, r22
     174:	ac 01       	movw	r20, r24
     176:	c3 01       	movw	r24, r6
     178:	b2 01       	movw	r22, r4
     17a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     17e:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <error>
     182:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <error+0x1>
     186:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <error+0x2>
     18a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <error+0x3>
	
	switch (_sensors_current.combined) {
     18e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_sensors_current+0xc>
     192:	e8 2f       	mov	r30, r24
     194:	e7 70       	andi	r30, 0x07	; 7
     196:	8e 2f       	mov	r24, r30
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	fc 01       	movw	r30, r24
     19c:	31 97       	sbiw	r30, 0x01	; 1
     19e:	e7 30       	cpi	r30, 0x07	; 7
     1a0:	f1 05       	cpc	r31, r1
     1a2:	20 f4       	brcc	.+8      	; 0x1ac <Control_Loop+0xa6>
     1a4:	ec 5c       	subi	r30, 0xCC	; 204
     1a6:	ff 4f       	sbci	r31, 0xFF	; 255
     1a8:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__tablejump2__>
		case 0b000:	// All white
			error = pre_error;
     1ac:	c0 92 22 01 	sts	0x0122, r12	; 0x800122 <error>
     1b0:	d0 92 23 01 	sts	0x0123, r13	; 0x800123 <error+0x1>
     1b4:	e0 92 24 01 	sts	0x0124, r14	; 0x800124 <error+0x2>
     1b8:	f0 92 25 01 	sts	0x0125, r15	; 0x800125 <error+0x3>
			next_state = last_state;
     1bc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <last_state>
     1c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1c4:	23 c0       	rjmp	.+70     	; 0x20c <Control_Loop+0x106>
			
		case 0b001:	// Right
			next_state = STATE_LEFT;
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1cc:	1f c0       	rjmp	.+62     	; 0x20c <Control_Loop+0x106>
		
		case 0b010:	// Mid
			next_state = STATE_FORWARD;
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1d4:	1b c0       	rjmp	.+54     	; 0x20c <Control_Loop+0x106>
		
		case 0b011:	// Right & Mid
			next_state = STATE_LEFT;
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <Control_Loop+0x106>
		
		case 0b100:	// Left
			next_state = STATE_RIGHT;
     1de:	84 e0       	ldi	r24, 0x04	; 4
     1e0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1e4:	13 c0       	rjmp	.+38     	; 0x20c <Control_Loop+0x106>
		
		case 0b101:	// Left & Right
			next_state = STATE_FORWARD;
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <Control_Loop+0x106>
		
		case 0b110:	// Left & Mid
			next_state = STATE_RIGHT;
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <Control_Loop+0x106>
		
		case 0b111:	// All
			error = pre_error;
     1f6:	c0 92 22 01 	sts	0x0122, r12	; 0x800122 <error>
     1fa:	d0 92 23 01 	sts	0x0123, r13	; 0x800123 <error+0x1>
     1fe:	e0 92 24 01 	sts	0x0124, r14	; 0x800124 <error+0x2>
     202:	f0 92 25 01 	sts	0x0125, r15	; 0x800125 <error+0x3>
			next_state = STATE_FORWARD;
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
	}
	
	speed = KP*error + KD*(error - pre_error);
     20c:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <error>
     210:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <error+0x1>
     214:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <error+0x2>
     218:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <error+0x3>
     21c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
     220:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
     224:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <__data_end+0x2>
     228:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <__data_end+0x3>
     22c:	c7 01       	movw	r24, r14
     22e:	b6 01       	movw	r22, r12
     230:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	5f e3       	ldi	r21, 0x3F	; 63
     23c:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
     240:	a7 01       	movw	r20, r14
     242:	96 01       	movw	r18, r12
     244:	0e 94 d4 05 	call	0xba8	; 0xba8 <__addsf3>
		
	/* Process State Outputs/Actions */
	switch (state) {
     248:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     24c:	23 30       	cpi	r18, 0x03	; 3
     24e:	e9 f0       	breq	.+58     	; 0x28a <Control_Loop+0x184>
     250:	28 f4       	brcc	.+10     	; 0x25c <Control_Loop+0x156>
     252:	21 30       	cpi	r18, 0x01	; 1
     254:	41 f0       	breq	.+16     	; 0x266 <Control_Loop+0x160>
     256:	22 30       	cpi	r18, 0x02	; 2
     258:	69 f0       	breq	.+26     	; 0x274 <Control_Loop+0x16e>
     25a:	39 c0       	rjmp	.+114    	; 0x2ce <Control_Loop+0x1c8>
     25c:	24 30       	cpi	r18, 0x04	; 4
     25e:	31 f1       	breq	.+76     	; 0x2ac <Control_Loop+0x1a6>
     260:	25 30       	cpi	r18, 0x05	; 5
     262:	89 f1       	breq	.+98     	; 0x2c6 <Control_Loop+0x1c0>
     264:	34 c0       	rjmp	.+104    	; 0x2ce <Control_Loop+0x1c8>
		case STATE_INIT:
			Motor_SetMode(MOTOR_FORWARD);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Motor_SetMode>
			next_state = STATE_FORWARD;
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
			break;
     272:	30 c0       	rjmp	.+96     	; 0x2d4 <Control_Loop+0x1ce>
			
		case STATE_FORWARD:
			Motor_SetDuty(MAX_SPEED_L, MAX_SPEED_R);
     274:	2a e9       	ldi	r18, 0x9A	; 154
     276:	39 e9       	ldi	r19, 0x99	; 153
     278:	49 e7       	ldi	r20, 0x79	; 121
     27a:	5f e3       	ldi	r21, 0x3F	; 63
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	9f e3       	ldi	r25, 0x3F	; 63
     284:	0e 94 c9 01 	call	0x392	; 0x392 <Motor_SetDuty>
			break;
     288:	25 c0       	rjmp	.+74     	; 0x2d4 <Control_Loop+0x1ce>
			
		case STATE_LEFT:
			Motor_SetDuty(MAX_SPEED_L, MAX_SPEED_R - speed);
     28a:	9b 01       	movw	r18, r22
     28c:	ac 01       	movw	r20, r24
     28e:	6a e9       	ldi	r22, 0x9A	; 154
     290:	79 e9       	ldi	r23, 0x99	; 153
     292:	89 e7       	ldi	r24, 0x79	; 121
     294:	9f e3       	ldi	r25, 0x3F	; 63
     296:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     29a:	9b 01       	movw	r18, r22
     29c:	ac 01       	movw	r20, r24
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	9f e3       	ldi	r25, 0x3F	; 63
     2a6:	0e 94 c9 01 	call	0x392	; 0x392 <Motor_SetDuty>
			break;
     2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <Control_Loop+0x1ce>
			
		case STATE_RIGHT:
			Motor_SetDuty(MAX_SPEED_L + speed, MAX_SPEED_R);
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	40 e8       	ldi	r20, 0x80	; 128
     2b2:	5f e3       	ldi	r21, 0x3F	; 63
     2b4:	0e 94 d4 05 	call	0xba8	; 0xba8 <__addsf3>
     2b8:	2a e9       	ldi	r18, 0x9A	; 154
     2ba:	39 e9       	ldi	r19, 0x99	; 153
     2bc:	49 e7       	ldi	r20, 0x79	; 121
     2be:	5f e3       	ldi	r21, 0x3F	; 63
     2c0:	0e 94 c9 01 	call	0x392	; 0x392 <Motor_SetDuty>
			break;
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <Control_Loop+0x1ce>
			
		case STATE_STOP:
			Motor_SetMode(MOTOR_STOP);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Motor_SetMode>
			break;
     2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <Control_Loop+0x1ce>
		default:
			next_state = STATE_INIT;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <next_state>
	printf("Err: %s\n", temp);
	dtostrf(pre_error, 5, 2, temp);
	printf("PreErr: %s\n", temp);
	//printf("State = %u, Next = %u, last = %u, Sensors = %u\n", state, next_state, last_state, _sensors_current.combined);
	#endif
	last_state = state;
     2d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2d8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <last_state>
	state = next_state;
     2dc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <next_state>
     2e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	7f 90       	pop	r7
     2fa:	6f 90       	pop	r6
     2fc:	5f 90       	pop	r5
     2fe:	4f 90       	pop	r4
     300:	08 95       	ret

00000302 <GPIO_Init>:
		}
}

void GPIO_Init() {
	// D13 LED (PB5)
	DDRB |= (1 << DDB5);
     302:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1 << DDB4);
     304:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<< PORTB4);
     306:	2c 9a       	sbi	0x05, 4	; 5
     308:	08 95       	ret

0000030a <main>:

/* Function Definitions */
int main(void)
{
	/* Initialize Everything */
	sei();
     30a:	78 94       	sei
	Timer_Init();
     30c:	0e 94 1b 03 	call	0x636	; 0x636 <Timer_Init>
	GPIO_Init();
     310:	0e 94 81 01 	call	0x302	; 0x302 <GPIO_Init>
	Motor_Init();
     314:	0e 94 af 01 	call	0x35e	; 0x35e <Motor_Init>
	uart_init();
     318:	0e 94 92 04 	call	0x924	; 0x924 <uart_init>
	ADC_Init();
     31c:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Init>
	stdin = stdout = stderr = &uart_stream;
     320:	ed ed       	ldi	r30, 0xDD	; 221
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	95 83       	std	Z+5, r25	; 0x05
     32a:	84 83       	std	Z+4, r24	; 0x04
     32c:	93 83       	std	Z+3, r25	; 0x03
     32e:	82 83       	std	Z+2, r24	; 0x02
     330:	91 83       	std	Z+1, r25	; 0x01
     332:	80 83       	st	Z, r24
	puts("\x1B[2J");
     334:	81 e1       	ldi	r24, 0x11	; 17
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 f9 07 	call	0xff2	; 0xff2 <puts>
	/* Add Tasks */
	Timer_Add(Control_Loop, CONTROL_INTERVAL);
     33c:	05 e0       	ldi	r16, 0x05	; 5
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 2a 03 	call	0x654	; 0x654 <Timer_Add>

    while (1) {
		Sensors_Read();		// Read sensors every loop. We want DATA.
     354:	0e 94 a0 02 	call	0x540	; 0x540 <Sensors_Read>
		Timer_Manager();
     358:	0e 94 56 03 	call	0x6ac	; 0x6ac <Timer_Manager>
     35c:	fb cf       	rjmp	.-10     	; 0x354 <main+0x4a>

0000035e <Motor_Init>:
     35e:	27 9a       	sbi	0x04, 7	; 4
     360:	8a b1       	in	r24, 0x0a	; 10
     362:	84 6f       	ori	r24, 0xF4	; 244
     364:	8a b9       	out	0x0a, r24	; 10
     366:	23 e0       	ldi	r18, 0x03	; 3
     368:	24 bd       	out	0x24, r18	; 36
     36a:	8b e0       	ldi	r24, 0x0B	; 11
     36c:	85 bd       	out	0x25, r24	; 37
     36e:	99 ef       	ldi	r25, 0xF9	; 249
     370:	97 bd       	out	0x27, r25	; 39
     372:	18 bc       	out	0x28, r1	; 40
     374:	86 e0       	ldi	r24, 0x06	; 6
     376:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     37a:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     37e:	2c e0       	ldi	r18, 0x0C	; 12
     380:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     384:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     388:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     38c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     390:	08 95       	ret

00000392 <Motor_SetDuty>:
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	4b 01       	movw	r8, r22
     3a4:	5c 01       	movw	r10, r24
     3a6:	69 01       	movw	r12, r18
     3a8:	7a 01       	movw	r14, r20
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e8       	ldi	r20, 0x80	; 128
     3b0:	5f e3       	ldi	r21, 0x3F	; 63
     3b2:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
     3b6:	88 23       	and	r24, r24
     3b8:	64 f0       	brlt	.+24     	; 0x3d2 <Motor_SetDuty+0x40>
     3ba:	87 b5       	in	r24, 0x27	; 39
     3bc:	8f 5f       	subi	r24, 0xFF	; 255
     3be:	88 bd       	out	0x28, r24	; 40
     3c0:	0f 2e       	mov	r0, r31
     3c2:	81 2c       	mov	r8, r1
     3c4:	91 2c       	mov	r9, r1
     3c6:	f0 e8       	ldi	r31, 0x80	; 128
     3c8:	af 2e       	mov	r10, r31
     3ca:	ff e3       	ldi	r31, 0x3F	; 63
     3cc:	bf 2e       	mov	r11, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	25 c0       	rjmp	.+74     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	a9 01       	movw	r20, r18
     3d8:	c5 01       	movw	r24, r10
     3da:	b4 01       	movw	r22, r8
     3dc:	0e 94 40 06 	call	0xc80	; 0xc80 <__cmpsf2>
     3e0:	18 16       	cp	r1, r24
     3e2:	2c f0       	brlt	.+10     	; 0x3ee <Motor_SetDuty+0x5c>
     3e4:	18 bc       	out	0x28, r1	; 40
     3e6:	81 2c       	mov	r8, r1
     3e8:	91 2c       	mov	r9, r1
     3ea:	54 01       	movw	r10, r8
     3ec:	17 c0       	rjmp	.+46     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3ee:	67 b5       	in	r22, 0x27	; 39
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	6f 5f       	subi	r22, 0xFF	; 255
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	07 2e       	mov	r0, r23
     3f8:	00 0c       	add	r0, r0
     3fa:	88 0b       	sbc	r24, r24
     3fc:	99 0b       	sbc	r25, r25
     3fe:	0e 94 76 06 	call	0xcec	; 0xcec <__floatsisf>
     402:	a5 01       	movw	r20, r10
     404:	94 01       	movw	r18, r8
     406:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e8       	ldi	r20, 0x80	; 128
     410:	5f e3       	ldi	r21, 0x3F	; 63
     412:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     416:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixunssfsi>
     41a:	68 bd       	out	0x28, r22	; 40
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e8       	ldi	r20, 0x80	; 128
     422:	5f e3       	ldi	r21, 0x3F	; 63
     424:	c7 01       	movw	r24, r14
     426:	b6 01       	movw	r22, r12
     428:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
     42c:	88 23       	and	r24, r24
     42e:	74 f0       	brlt	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     430:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     43a:	0f 2e       	mov	r0, r31
     43c:	c1 2c       	mov	r12, r1
     43e:	d1 2c       	mov	r13, r1
     440:	f0 e8       	ldi	r31, 0x80	; 128
     442:	ef 2e       	mov	r14, r31
     444:	ff e3       	ldi	r31, 0x3F	; 63
     446:	ff 2e       	mov	r15, r31
     448:	f0 2d       	mov	r31, r0
     44a:	28 c0       	rjmp	.+80     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	a9 01       	movw	r20, r18
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 40 06 	call	0xc80	; 0xc80 <__cmpsf2>
     45a:	18 16       	cp	r1, r24
     45c:	34 f0       	brlt	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     45e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     462:	c1 2c       	mov	r12, r1
     464:	d1 2c       	mov	r13, r1
     466:	76 01       	movw	r14, r12
     468:	19 c0       	rjmp	.+50     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     46a:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	6f 5f       	subi	r22, 0xFF	; 255
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	07 2e       	mov	r0, r23
     476:	00 0c       	add	r0, r0
     478:	88 0b       	sbc	r24, r24
     47a:	99 0b       	sbc	r25, r25
     47c:	0e 94 76 06 	call	0xcec	; 0xcec <__floatsisf>
     480:	a7 01       	movw	r20, r14
     482:	96 01       	movw	r18, r12
     484:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e8       	ldi	r20, 0x80	; 128
     48e:	5f e3       	ldi	r21, 0x3F	; 63
     490:	0e 94 d3 05 	call	0xba6	; 0xba6 <__subsf3>
     494:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixunssfsi>
     498:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     49c:	e8 e2       	ldi	r30, 0x28	; 40
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	80 82       	st	Z, r8
     4a2:	91 82       	std	Z+1, r9	; 0x01
     4a4:	a2 82       	std	Z+2, r10	; 0x02
     4a6:	b3 82       	std	Z+3, r11	; 0x03
     4a8:	c4 82       	std	Z+4, r12	; 0x04
     4aa:	d5 82       	std	Z+5, r13	; 0x05
     4ac:	e6 82       	std	Z+6, r14	; 0x06
     4ae:	f7 82       	std	Z+7, r15	; 0x07
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	bf 90       	pop	r11
     4ba:	af 90       	pop	r10
     4bc:	9f 90       	pop	r9
     4be:	8f 90       	pop	r8
     4c0:	08 95       	ret

000004c2 <Motor_SetMode>:
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	21 f0       	breq	.+8      	; 0x4ce <Motor_SetMode+0xc>
     4c6:	68 f0       	brcs	.+26     	; 0x4e2 <Motor_SetMode+0x20>
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	31 f0       	breq	.+12     	; 0x4d8 <Motor_SetMode+0x16>
     4cc:	08 95       	ret
     4ce:	5a 98       	cbi	0x0b, 2	; 11
     4d0:	5c 9a       	sbi	0x0b, 4	; 11
     4d2:	28 9a       	sbi	0x05, 0	; 5
     4d4:	5f 98       	cbi	0x0b, 7	; 11
     4d6:	08 95       	ret
     4d8:	5a 9a       	sbi	0x0b, 2	; 11
     4da:	5c 98       	cbi	0x0b, 4	; 11
     4dc:	5f 9a       	sbi	0x0b, 7	; 11
     4de:	28 98       	cbi	0x05, 0	; 5
     4e0:	08 95       	ret
     4e2:	1b b8       	out	0x0b, r1	; 11
     4e4:	28 98       	cbi	0x05, 0	; 5
     4e6:	08 95       	ret

000004e8 <__vector_14>:
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	5d 9a       	sbi	0x0b, 5	; 11
     4f4:	0f 90       	pop	r0
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <__vector_15>:
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	5d 98       	cbi	0x0b, 5	; 11
     50a:	0f 90       	pop	r0
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	0f 90       	pop	r0
     510:	1f 90       	pop	r1
     512:	18 95       	reti

00000514 <__vector_7>:
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	5e 9a       	sbi	0x0b, 6	; 11
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <__vector_8>:
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	5e 98       	cbi	0x0b, 6	; 11
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <Sensors_Read>:
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_SetChannel>
     552:	0e 94 75 00 	call	0xea	; 0xea <ADC_ReadVoltage>
     556:	cd e3       	ldi	r28, 0x3D	; 61
     558:	d1 e0       	ldi	r29, 0x01	; 1
     55a:	68 83       	st	Y, r22
     55c:	79 83       	std	Y+1, r23	; 0x01
     55e:	8a 83       	std	Y+2, r24	; 0x02
     560:	9b 83       	std	Y+3, r25	; 0x03
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_SetChannel>
     568:	0e 94 75 00 	call	0xea	; 0xea <ADC_ReadVoltage>
     56c:	6c 83       	std	Y+4, r22	; 0x04
     56e:	7d 83       	std	Y+5, r23	; 0x05
     570:	8e 83       	std	Y+6, r24	; 0x06
     572:	9f 83       	std	Y+7, r25	; 0x07
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_SetChannel>
     57a:	0e 94 75 00 	call	0xea	; 0xea <ADC_ReadVoltage>
     57e:	6b 01       	movw	r12, r22
     580:	7c 01       	movw	r14, r24
     582:	68 87       	std	Y+8, r22	; 0x08
     584:	79 87       	std	Y+9, r23	; 0x09
     586:	8a 87       	std	Y+10, r24	; 0x0a
     588:	9b 87       	std	Y+11, r25	; 0x0b
     58a:	8d e0       	ldi	r24, 0x0D	; 13
     58c:	fe 01       	movw	r30, r28
     58e:	a0 e3       	ldi	r26, 0x30	; 48
     590:	b1 e0       	ldi	r27, 0x01	; 1
     592:	01 90       	ld	r0, Z+
     594:	0d 92       	st	X+, r0
     596:	8a 95       	dec	r24
     598:	e1 f7       	brne	.-8      	; 0x592 <Sensors_Read+0x52>
     59a:	26 e6       	ldi	r18, 0x66	; 102
     59c:	36 e6       	ldi	r19, 0x66	; 102
     59e:	46 e9       	ldi	r20, 0x96	; 150
     5a0:	50 e4       	ldi	r21, 0x40	; 64
     5a2:	68 81       	ld	r22, Y
     5a4:	79 81       	ldd	r23, Y+1	; 0x01
     5a6:	8a 81       	ldd	r24, Y+2	; 0x02
     5a8:	9b 81       	ldd	r25, Y+3	; 0x03
     5aa:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
     5ae:	88 23       	and	r24, r24
     5b0:	34 f0       	brlt	.+12     	; 0x5be <Sensors_Read+0x7e>
     5b2:	e9 e4       	ldi	r30, 0x49	; 73
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	80 81       	ld	r24, Z
     5b8:	84 60       	ori	r24, 0x04	; 4
     5ba:	80 83       	st	Z, r24
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <Sensors_Read+0x88>
     5be:	e9 e4       	ldi	r30, 0x49	; 73
     5c0:	f1 e0       	ldi	r31, 0x01	; 1
     5c2:	80 81       	ld	r24, Z
     5c4:	8b 7f       	andi	r24, 0xFB	; 251
     5c6:	80 83       	st	Z, r24
     5c8:	26 e6       	ldi	r18, 0x66	; 102
     5ca:	36 e6       	ldi	r19, 0x66	; 102
     5cc:	46 e9       	ldi	r20, 0x96	; 150
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <_sensors_current+0x4>
     5d4:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <_sensors_current+0x5>
     5d8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_sensors_current+0x6>
     5dc:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_sensors_current+0x7>
     5e0:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
     5e4:	88 23       	and	r24, r24
     5e6:	34 f0       	brlt	.+12     	; 0x5f4 <Sensors_Read+0xb4>
     5e8:	e9 e4       	ldi	r30, 0x49	; 73
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	80 81       	ld	r24, Z
     5ee:	82 60       	ori	r24, 0x02	; 2
     5f0:	80 83       	st	Z, r24
     5f2:	05 c0       	rjmp	.+10     	; 0x5fe <Sensors_Read+0xbe>
     5f4:	e9 e4       	ldi	r30, 0x49	; 73
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	80 81       	ld	r24, Z
     5fa:	8d 7f       	andi	r24, 0xFD	; 253
     5fc:	80 83       	st	Z, r24
     5fe:	26 e6       	ldi	r18, 0x66	; 102
     600:	36 e6       	ldi	r19, 0x66	; 102
     602:	46 e9       	ldi	r20, 0x96	; 150
     604:	50 e4       	ldi	r21, 0x40	; 64
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
     60e:	88 23       	and	r24, r24
     610:	34 f0       	brlt	.+12     	; 0x61e <Sensors_Read+0xde>
     612:	e9 e4       	ldi	r30, 0x49	; 73
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	80 81       	ld	r24, Z
     618:	81 60       	ori	r24, 0x01	; 1
     61a:	80 83       	st	Z, r24
     61c:	05 c0       	rjmp	.+10     	; 0x628 <Sensors_Read+0xe8>
     61e:	e9 e4       	ldi	r30, 0x49	; 73
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	80 81       	ld	r24, Z
     624:	8e 7f       	andi	r24, 0xFE	; 254
     626:	80 83       	st	Z, r24
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <Timer_Init>:
     636:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     63a:	8b e0       	ldi	r24, 0x0B	; 11
     63c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     640:	89 ef       	ldi	r24, 0xF9	; 249
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     648:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     652:	08 95       	ret

00000654 <Timer_Add>:
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <timer_head>
     65c:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <timer_head+0x1>
     660:	df 01       	movw	r26, r30
     662:	a2 55       	subi	r26, 0x52	; 82
     664:	b1 40       	sbci	r27, 0x01	; 1
     666:	d9 97       	sbiw	r26, 0x39	; 57
     668:	dc f4       	brge	.+54     	; 0x6a0 <Timer_Add+0x4c>
     66a:	92 8b       	std	Z+18, r25	; 0x12
     66c:	81 8b       	std	Z+17, r24	; 0x11
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	80 8b       	std	Z+16, r24	; 0x10
     672:	10 82       	st	Z, r1
     674:	11 82       	std	Z+1, r1	; 0x01
     676:	12 82       	std	Z+2, r1	; 0x02
     678:	13 82       	std	Z+3, r1	; 0x03
     67a:	14 82       	std	Z+4, r1	; 0x04
     67c:	15 82       	std	Z+5, r1	; 0x05
     67e:	16 82       	std	Z+6, r1	; 0x06
     680:	17 82       	std	Z+7, r1	; 0x07
     682:	00 87       	std	Z+8, r16	; 0x08
     684:	11 87       	std	Z+9, r17	; 0x09
     686:	22 87       	std	Z+10, r18	; 0x0a
     688:	33 87       	std	Z+11, r19	; 0x0b
     68a:	44 87       	std	Z+12, r20	; 0x0c
     68c:	55 87       	std	Z+13, r21	; 0x0d
     68e:	66 87       	std	Z+14, r22	; 0x0e
     690:	77 87       	std	Z+15, r23	; 0x0f
     692:	cf 01       	movw	r24, r30
     694:	43 96       	adiw	r24, 0x13	; 19
     696:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer_head+0x1>
     69a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_head>
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <Timer_Add+0x50>
     6a0:	e0 e0       	ldi	r30, 0x00	; 0
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	cf 01       	movw	r24, r30
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <Timer_Manager>:
     6ac:	2f 92       	push	r2
     6ae:	3f 92       	push	r3
     6b0:	4f 92       	push	r4
     6b2:	5f 92       	push	r5
     6b4:	6f 92       	push	r6
     6b6:	7f 92       	push	r7
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <Timer_Manager+0x26>
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <Timer_Manager+0x28>
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <Timer_Manager+0x2a>
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	20 90 4a 01 	lds	r2, 0x014A	; 0x80014a <ticks>
     6de:	30 90 4b 01 	lds	r3, 0x014B	; 0x80014b <ticks+0x1>
     6e2:	40 90 4c 01 	lds	r4, 0x014C	; 0x80014c <ticks+0x2>
     6e6:	50 90 4d 01 	lds	r5, 0x014D	; 0x80014d <ticks+0x3>
     6ea:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ticks+0x4>
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <ticks+0x5>
     6f4:	9a 83       	std	Y+2, r25	; 0x02
     6f6:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <ticks+0x6>
     6fa:	ab 83       	std	Y+3, r26	; 0x03
     6fc:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <ticks+0x7>
     700:	bc 83       	std	Y+4, r27	; 0x04
     702:	e2 e5       	ldi	r30, 0x52	; 82
     704:	f1 e0       	ldi	r31, 0x01	; 1
     706:	fe 83       	std	Y+6, r31	; 0x06
     708:	ed 83       	std	Y+5, r30	; 0x05
     70a:	0f 2e       	mov	r0, r31
     70c:	fb e8       	ldi	r31, 0x8B	; 139
     70e:	6f 2e       	mov	r6, r31
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	7f 2e       	mov	r7, r31
     714:	f0 2d       	mov	r31, r0
     716:	8d 80       	ldd	r8, Y+5	; 0x05
     718:	9e 80       	ldd	r9, Y+6	; 0x06
     71a:	d4 01       	movw	r26, r8
     71c:	50 96       	adiw	r26, 0x10	; 16
     71e:	8c 91       	ld	r24, X
     720:	50 97       	sbiw	r26, 0x10	; 16
     722:	82 30       	cpi	r24, 0x02	; 2
     724:	09 f0       	breq	.+2      	; 0x728 <Timer_Manager+0x7c>
     726:	73 c0       	rjmp	.+230    	; 0x80e <Timer_Manager+0x162>
     728:	22 2d       	mov	r18, r2
     72a:	33 2d       	mov	r19, r3
     72c:	44 2d       	mov	r20, r4
     72e:	55 2d       	mov	r21, r5
     730:	69 81       	ldd	r22, Y+1	; 0x01
     732:	7a 81       	ldd	r23, Y+2	; 0x02
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	ac 90       	ld	r10, X
     73a:	11 96       	adiw	r26, 0x01	; 1
     73c:	bc 90       	ld	r11, X
     73e:	11 97       	sbiw	r26, 0x01	; 1
     740:	12 96       	adiw	r26, 0x02	; 2
     742:	cc 90       	ld	r12, X
     744:	12 97       	sbiw	r26, 0x02	; 2
     746:	13 96       	adiw	r26, 0x03	; 3
     748:	dc 90       	ld	r13, X
     74a:	13 97       	sbiw	r26, 0x03	; 3
     74c:	14 96       	adiw	r26, 0x04	; 4
     74e:	ec 90       	ld	r14, X
     750:	14 97       	sbiw	r26, 0x04	; 4
     752:	15 96       	adiw	r26, 0x05	; 5
     754:	fc 90       	ld	r15, X
     756:	15 97       	sbiw	r26, 0x05	; 5
     758:	16 96       	adiw	r26, 0x06	; 6
     75a:	0c 91       	ld	r16, X
     75c:	16 97       	sbiw	r26, 0x06	; 6
     75e:	17 96       	adiw	r26, 0x07	; 7
     760:	1c 91       	ld	r17, X
     762:	17 97       	sbiw	r26, 0x07	; 7
     764:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__adddi3>
     768:	2c 93       	st	X, r18
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	3c 93       	st	X, r19
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	12 96       	adiw	r26, 0x02	; 2
     772:	4c 93       	st	X, r20
     774:	12 97       	sbiw	r26, 0x02	; 2
     776:	13 96       	adiw	r26, 0x03	; 3
     778:	5c 93       	st	X, r21
     77a:	13 97       	sbiw	r26, 0x03	; 3
     77c:	14 96       	adiw	r26, 0x04	; 4
     77e:	6c 93       	st	X, r22
     780:	14 97       	sbiw	r26, 0x04	; 4
     782:	15 96       	adiw	r26, 0x05	; 5
     784:	7c 93       	st	X, r23
     786:	15 97       	sbiw	r26, 0x05	; 5
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	8c 93       	st	X, r24
     78c:	16 97       	sbiw	r26, 0x06	; 6
     78e:	17 96       	adiw	r26, 0x07	; 7
     790:	9c 93       	st	X, r25
     792:	17 97       	sbiw	r26, 0x07	; 7
     794:	18 96       	adiw	r26, 0x08	; 8
     796:	ac 90       	ld	r10, X
     798:	18 97       	sbiw	r26, 0x08	; 8
     79a:	19 96       	adiw	r26, 0x09	; 9
     79c:	bc 90       	ld	r11, X
     79e:	19 97       	sbiw	r26, 0x09	; 9
     7a0:	1a 96       	adiw	r26, 0x0a	; 10
     7a2:	cc 90       	ld	r12, X
     7a4:	1a 97       	sbiw	r26, 0x0a	; 10
     7a6:	1b 96       	adiw	r26, 0x0b	; 11
     7a8:	dc 90       	ld	r13, X
     7aa:	1b 97       	sbiw	r26, 0x0b	; 11
     7ac:	1c 96       	adiw	r26, 0x0c	; 12
     7ae:	ec 90       	ld	r14, X
     7b0:	1c 97       	sbiw	r26, 0x0c	; 12
     7b2:	1d 96       	adiw	r26, 0x0d	; 13
     7b4:	fc 90       	ld	r15, X
     7b6:	1d 97       	sbiw	r26, 0x0d	; 13
     7b8:	1e 96       	adiw	r26, 0x0e	; 14
     7ba:	0c 91       	ld	r16, X
     7bc:	1e 97       	sbiw	r26, 0x0e	; 14
     7be:	1f 96       	adiw	r26, 0x0f	; 15
     7c0:	1c 91       	ld	r17, X
     7c2:	1f 97       	sbiw	r26, 0x0f	; 15
     7c4:	0e 94 bc 07 	call	0xf78	; 0xf78 <__cmpdi2>
     7c8:	10 f1       	brcs	.+68     	; 0x80e <Timer_Manager+0x162>
     7ca:	51 96       	adiw	r26, 0x11	; 17
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	52 97       	sbiw	r26, 0x12	; 18
     7d2:	30 97       	sbiw	r30, 0x00	; 0
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <Timer_Manager+0x12c>
     7d6:	09 95       	icall
     7d8:	f4 01       	movw	r30, r8
     7da:	20 81       	ld	r18, Z
     7dc:	31 81       	ldd	r19, Z+1	; 0x01
     7de:	42 81       	ldd	r20, Z+2	; 0x02
     7e0:	53 81       	ldd	r21, Z+3	; 0x03
     7e2:	64 81       	ldd	r22, Z+4	; 0x04
     7e4:	75 81       	ldd	r23, Z+5	; 0x05
     7e6:	86 81       	ldd	r24, Z+6	; 0x06
     7e8:	97 81       	ldd	r25, Z+7	; 0x07
     7ea:	a0 84       	ldd	r10, Z+8	; 0x08
     7ec:	b1 84       	ldd	r11, Z+9	; 0x09
     7ee:	c2 84       	ldd	r12, Z+10	; 0x0a
     7f0:	d3 84       	ldd	r13, Z+11	; 0x0b
     7f2:	e4 84       	ldd	r14, Z+12	; 0x0c
     7f4:	f5 84       	ldd	r15, Z+13	; 0x0d
     7f6:	06 85       	ldd	r16, Z+14	; 0x0e
     7f8:	17 85       	ldd	r17, Z+15	; 0x0f
     7fa:	0e 94 b3 07 	call	0xf66	; 0xf66 <__subdi3>
     7fe:	20 83       	st	Z, r18
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	42 83       	std	Z+2, r20	; 0x02
     804:	53 83       	std	Z+3, r21	; 0x03
     806:	64 83       	std	Z+4, r22	; 0x04
     808:	75 83       	std	Z+5, r23	; 0x05
     80a:	86 83       	std	Z+6, r24	; 0x06
     80c:	97 83       	std	Z+7, r25	; 0x07
     80e:	8d 81       	ldd	r24, Y+5	; 0x05
     810:	9e 81       	ldd	r25, Y+6	; 0x06
     812:	43 96       	adiw	r24, 0x13	; 19
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
     818:	86 15       	cp	r24, r6
     81a:	97 05       	cpc	r25, r7
     81c:	09 f0       	breq	.+2      	; 0x820 <Timer_Manager+0x174>
     81e:	7b cf       	rjmp	.-266    	; 0x716 <Timer_Manager+0x6a>
     820:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <ticks>
     824:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <ticks+0x1>
     828:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <ticks+0x2>
     82c:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <ticks+0x3>
     830:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <ticks+0x4>
     834:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <ticks+0x5>
     838:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ticks+0x6>
     83c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <ticks+0x7>
     840:	a2 2c       	mov	r10, r2
     842:	b3 2c       	mov	r11, r3
     844:	c4 2c       	mov	r12, r4
     846:	d5 2c       	mov	r13, r5
     848:	e9 80       	ldd	r14, Y+1	; 0x01
     84a:	fa 80       	ldd	r15, Y+2	; 0x02
     84c:	0b 81       	ldd	r16, Y+3	; 0x03
     84e:	1c 81       	ldd	r17, Y+4	; 0x04
     850:	0e 94 b3 07 	call	0xf66	; 0xf66 <__subdi3>
     854:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <ticks>
     858:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <ticks+0x1>
     85c:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <ticks+0x2>
     860:	50 93 4d 01 	sts	0x014D, r21	; 0x80014d <ticks+0x3>
     864:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <ticks+0x4>
     868:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <ticks+0x5>
     86c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <ticks+0x6>
     870:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <ticks+0x7>
     874:	26 96       	adiw	r28, 0x06	; 6
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	4f 90       	pop	r4
     8a0:	3f 90       	pop	r3
     8a2:	2f 90       	pop	r2
     8a4:	08 95       	ret

000008a6 <__vector_11>:
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	2f 93       	push	r18
     8b2:	3f 93       	push	r19
     8b4:	4f 93       	push	r20
     8b6:	5f 93       	push	r21
     8b8:	6f 93       	push	r22
     8ba:	7f 93       	push	r23
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <ticks>
     8c6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <ticks+0x1>
     8ca:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <ticks+0x2>
     8ce:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <ticks+0x3>
     8d2:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <ticks+0x4>
     8d6:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <ticks+0x5>
     8da:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ticks+0x6>
     8de:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <ticks+0x7>
     8e2:	a1 e0       	ldi	r26, 0x01	; 1
     8e4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__adddi3_s8>
     8e8:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <ticks>
     8ec:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <ticks+0x1>
     8f0:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <ticks+0x2>
     8f4:	50 93 4d 01 	sts	0x014D, r21	; 0x80014d <ticks+0x3>
     8f8:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <ticks+0x4>
     8fc:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <ticks+0x5>
     900:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <ticks+0x6>
     904:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <ticks+0x7>
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     924:	87 e6       	ldi	r24, 0x67	; 103
     926:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     92a:	88 e1       	ldi	r24, 0x18	; 24
     92c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     930:	08 95       	ret

00000932 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     932:	cf 93       	push	r28
     934:	c8 2f       	mov	r28, r24

  if (c == '\a')
     936:	87 30       	cpi	r24, 0x07	; 7
     938:	69 f4       	brne	.+26     	; 0x954 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     93a:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <__iob+0x4>
     93e:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <__iob+0x5>
     942:	47 e0       	ldi	r20, 0x07	; 7
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	86 e1       	ldi	r24, 0x16	; 22
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <fwrite>
      return 0;
     952:	0c c0       	rjmp	.+24     	; 0x96c <uart_putchar+0x3a>
    }

  if (c == '\n')
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	19 f4       	brne	.+6      	; 0x95e <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     958:	8d e0       	ldi	r24, 0x0D	; 13
     95a:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     95e:	e0 ec       	ldi	r30, 0xC0	; 192
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	85 ff       	sbrs	r24, 5
     966:	fd cf       	rjmp	.-6      	; 0x962 <uart_putchar+0x30>
  UDR0 = c;
     968:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     974:	6f 92       	push	r6
     976:	7f 92       	push	r7
     978:	8f 92       	push	r8
     97a:	9f 92       	push	r9
     97c:	af 92       	push	r10
     97e:	bf 92       	push	r11
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     990:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <rxp.1827>
     994:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <rxp.1827+0x1>
     998:	23 2b       	or	r18, r19
     99a:	09 f0       	breq	.+2      	; 0x99e <uart_getchar+0x2a>
     99c:	da c0       	rjmp	.+436    	; 0xb52 <uart_getchar+0x1de>
     99e:	8c 01       	movw	r16, r24
     9a0:	0f 2e       	mov	r0, r31
     9a2:	fb e8       	ldi	r31, 0x8B	; 139
     9a4:	8f 2e       	mov	r8, r31
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	9f 2e       	mov	r9, r31
     9aa:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     9ac:	c0 ec       	ldi	r28, 0xC0	; 192
     9ae:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
     9b0:	0f 2e       	mov	r0, r31
     9b2:	f6 ec       	ldi	r31, 0xC6	; 198
     9b4:	cf 2e       	mov	r12, r31
     9b6:	d1 2c       	mov	r13, r1
     9b8:	f0 2d       	mov	r31, r0
     9ba:	54 01       	movw	r10, r8
     9bc:	0f 2e       	mov	r0, r31
     9be:	fa e8       	ldi	r31, 0x8A	; 138
     9c0:	6f 2e       	mov	r6, r31
     9c2:	f1 e0       	ldi	r31, 0x01	; 1
     9c4:	7f 2e       	mov	r7, r31
     9c6:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     9c8:	88 81       	ld	r24, Y
     9ca:	88 23       	and	r24, r24
     9cc:	ec f7       	brge	.-6      	; 0x9c8 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
     9ce:	88 81       	ld	r24, Y
     9d0:	84 fd       	sbrc	r24, 4
     9d2:	d2 c0       	rjmp	.+420    	; 0xb78 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     9d4:	88 81       	ld	r24, Y
     9d6:	83 fd       	sbrc	r24, 3
     9d8:	d2 c0       	rjmp	.+420    	; 0xb7e <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
     9da:	f6 01       	movw	r30, r12
     9dc:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     9de:	8d 30       	cpi	r24, 0x0D	; 13
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
     9e2:	8a 30       	cpi	r24, 0x0A	; 10
     9e4:	69 f4       	brne	.+26     	; 0xa00 <uart_getchar+0x8c>
	  {
	    *cp = c;
     9e6:	8a e0       	ldi	r24, 0x0A	; 10
     9e8:	f4 01       	movw	r30, r8
     9ea:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     9ec:	b8 01       	movw	r22, r16
     9ee:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
	    rxp = b;
     9f2:	8b e8       	ldi	r24, 0x8B	; 139
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <rxp.1827+0x1>
     9fa:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <rxp.1827>
	    break;
     9fe:	a9 c0       	rjmp	.+338    	; 0xb52 <uart_getchar+0x1de>
	  }
	else if (c == '\t')
     a00:	89 30       	cpi	r24, 0x09	; 9
     a02:	39 f0       	breq	.+14     	; 0xa12 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a04:	90 ee       	ldi	r25, 0xE0	; 224
     a06:	98 0f       	add	r25, r24
     a08:	9f 35       	cpi	r25, 0x5F	; 95
     a0a:	20 f0       	brcs	.+8      	; 0xa14 <uart_getchar+0xa0>
     a0c:	80 3a       	cpi	r24, 0xA0	; 160
     a0e:	b8 f0       	brcs	.+46     	; 0xa3e <uart_getchar+0xca>
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
     a12:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a14:	fa ed       	ldi	r31, 0xDA	; 218
     a16:	8f 16       	cp	r8, r31
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	9f 06       	cpc	r9, r31
     a1c:	29 f4       	brne	.+10     	; 0xa28 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
     a1e:	b8 01       	movw	r22, r16
     a20:	87 e0       	ldi	r24, 0x07	; 7
     a22:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
     a26:	d0 cf       	rjmp	.-96     	; 0x9c8 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
     a28:	74 01       	movw	r14, r8
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
     a2c:	e9 1a       	sub	r14, r25
     a2e:	f9 0a       	sbc	r15, r25
     a30:	f4 01       	movw	r30, r8
     a32:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     a34:	b8 01       	movw	r22, r16
     a36:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     a3a:	47 01       	movw	r8, r14
     a3c:	c5 cf       	rjmp	.-118    	; 0x9c8 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     a3e:	82 31       	cpi	r24, 0x12	; 18
     a40:	d1 f1       	breq	.+116    	; 0xab6 <uart_getchar+0x142>
     a42:	30 f4       	brcc	.+12     	; 0xa50 <uart_getchar+0xdc>
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	09 f4       	brne	.+2      	; 0xa4a <uart_getchar+0xd6>
     a48:	9d c0       	rjmp	.+314    	; 0xb84 <uart_getchar+0x210>
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	e9 f0       	breq	.+58     	; 0xa88 <uart_getchar+0x114>
     a4e:	bc cf       	rjmp	.-136    	; 0x9c8 <uart_getchar+0x54>
     a50:	87 31       	cpi	r24, 0x17	; 23
     a52:	29 f0       	breq	.+10     	; 0xa5e <uart_getchar+0xea>
     a54:	8f 37       	cpi	r24, 0x7F	; 127
     a56:	c1 f0       	breq	.+48     	; 0xa88 <uart_getchar+0x114>
     a58:	85 31       	cpi	r24, 0x15	; 21
     a5a:	79 f0       	breq	.+30     	; 0xa7a <uart_getchar+0x106>
     a5c:	b5 cf       	rjmp	.-150    	; 0x9c8 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a5e:	fb e8       	ldi	r31, 0x8B	; 139
     a60:	8f 16       	cp	r8, r31
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	9f 06       	cpc	r9, r31
     a66:	09 f0       	breq	.+2      	; 0xa6a <uart_getchar+0xf6>
     a68:	08 f4       	brcc	.+2      	; 0xa6c <uart_getchar+0xf8>
     a6a:	ae cf       	rjmp	.-164    	; 0x9c8 <uart_getchar+0x54>
     a6c:	f4 01       	movw	r30, r8
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	80 81       	ld	r24, Z
     a72:	80 32       	cpi	r24, 0x20	; 32
     a74:	09 f0       	breq	.+2      	; 0xa78 <uart_getchar+0x104>
     a76:	52 c0       	rjmp	.+164    	; 0xb1c <uart_getchar+0x1a8>
     a78:	a7 cf       	rjmp	.-178    	; 0x9c8 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a7a:	8b e8       	ldi	r24, 0x8B	; 139
     a7c:	88 16       	cp	r8, r24
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	98 06       	cpc	r9, r24
     a82:	09 f0       	breq	.+2      	; 0xa86 <uart_getchar+0x112>
     a84:	98 f5       	brcc	.+102    	; 0xaec <uart_getchar+0x178>
     a86:	a0 cf       	rjmp	.-192    	; 0x9c8 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a88:	9b e8       	ldi	r25, 0x8B	; 139
     a8a:	89 16       	cp	r8, r25
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	99 06       	cpc	r9, r25
     a90:	09 f0       	breq	.+2      	; 0xa94 <uart_getchar+0x120>
     a92:	08 f4       	brcc	.+2      	; 0xa96 <uart_getchar+0x122>
     a94:	99 cf       	rjmp	.-206    	; 0x9c8 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
     a96:	b8 01       	movw	r22, r16
     a98:	88 e0       	ldi	r24, 0x08	; 8
     a9a:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		uart_putchar(' ', stream);
     a9e:	b8 01       	movw	r22, r16
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		uart_putchar('\b', stream);
     aa6:	b8 01       	movw	r22, r16
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		cp--;
     aae:	e1 e0       	ldi	r30, 0x01	; 1
     ab0:	8e 1a       	sub	r8, r30
     ab2:	91 08       	sbc	r9, r1
     ab4:	89 cf       	rjmp	.-238    	; 0x9c8 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     ab6:	b8 01       	movw	r22, r16
     ab8:	8d e0       	ldi	r24, 0x0D	; 13
     aba:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     abe:	fb e8       	ldi	r31, 0x8B	; 139
     ac0:	8f 16       	cp	r8, r31
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	9f 06       	cpc	r9, r31
     ac6:	09 f0       	breq	.+2      	; 0xaca <uart_getchar+0x156>
     ac8:	08 f4       	brcc	.+2      	; 0xacc <uart_getchar+0x158>
     aca:	7e cf       	rjmp	.-260    	; 0x9c8 <uart_getchar+0x54>
     acc:	0f 2e       	mov	r0, r31
     ace:	fb e8       	ldi	r31, 0x8B	; 139
     ad0:	ef 2e       	mov	r14, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	ff 2e       	mov	r15, r31
     ad6:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
     ad8:	b8 01       	movw	r22, r16
     ada:	f7 01       	movw	r30, r14
     adc:	81 91       	ld	r24, Z+
     ade:	7f 01       	movw	r14, r30
     ae0:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     ae4:	8e 14       	cp	r8, r14
     ae6:	9f 04       	cpc	r9, r15
     ae8:	b9 f7       	brne	.-18     	; 0xad8 <uart_getchar+0x164>
     aea:	6e cf       	rjmp	.-292    	; 0x9c8 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     aec:	b8 01       	movw	r22, r16
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		uart_putchar(' ', stream);
     af4:	b8 01       	movw	r22, r16
     af6:	80 e2       	ldi	r24, 0x20	; 32
     af8:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		uart_putchar('\b', stream);
     afc:	b8 01       	movw	r22, r16
     afe:	88 e0       	ldi	r24, 0x08	; 8
     b00:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		cp--;
     b04:	f1 e0       	ldi	r31, 0x01	; 1
     b06:	8f 1a       	sub	r8, r31
     b08:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b0a:	8b e8       	ldi	r24, 0x8B	; 139
     b0c:	88 16       	cp	r8, r24
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	98 06       	cpc	r9, r24
     b12:	61 f7       	brne	.-40     	; 0xaec <uart_getchar+0x178>
     b14:	f3 01       	movw	r30, r6
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	4f 01       	movw	r8, r30
     b1a:	56 cf       	rjmp	.-340    	; 0x9c8 <uart_getchar+0x54>
     b1c:	74 01       	movw	r14, r8
     b1e:	f1 e0       	ldi	r31, 0x01	; 1
     b20:	ef 1a       	sub	r14, r31
     b22:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b24:	b8 01       	movw	r22, r16
     b26:	88 e0       	ldi	r24, 0x08	; 8
     b28:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		uart_putchar(' ', stream);
     b2c:	b8 01       	movw	r22, r16
     b2e:	80 e2       	ldi	r24, 0x20	; 32
     b30:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		uart_putchar('\b', stream);
     b34:	b8 01       	movw	r22, r16
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	0e 94 99 04 	call	0x932	; 0x932 <uart_putchar>
		cp--;
     b3c:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b3e:	ea 14       	cp	r14, r10
     b40:	fb 04       	cpc	r15, r11
     b42:	09 f4       	brne	.+2      	; 0xb46 <uart_getchar+0x1d2>
     b44:	41 cf       	rjmp	.-382    	; 0x9c8 <uart_getchar+0x54>
     b46:	f7 01       	movw	r30, r14
     b48:	82 91       	ld	r24, -Z
     b4a:	7f 01       	movw	r14, r30
     b4c:	80 32       	cpi	r24, 0x20	; 32
     b4e:	51 f7       	brne	.-44     	; 0xb24 <uart_getchar+0x1b0>
     b50:	3b cf       	rjmp	.-394    	; 0x9c8 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b52:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <rxp.1827>
     b56:	f0 91 dc 01 	lds	r31, 0x01DC	; 0x8001dc <rxp.1827+0x1>
     b5a:	cf 01       	movw	r24, r30
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <rxp.1827+0x1>
     b62:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <rxp.1827>
     b66:	80 81       	ld	r24, Z
  if (c == '\n')
     b68:	8a 30       	cpi	r24, 0x0A	; 10
     b6a:	21 f4       	brne	.+8      	; 0xb74 <uart_getchar+0x200>
    rxp = 0;
     b6c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <rxp.1827+0x1>
     b70:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <rxp.1827>

  return c;
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	08 c0       	rjmp	.+16     	; 0xb88 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     b78:	8e ef       	ldi	r24, 0xFE	; 254
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	9f 90       	pop	r9
     b9e:	8f 90       	pop	r8
     ba0:	7f 90       	pop	r7
     ba2:	6f 90       	pop	r6
     ba4:	08 95       	ret

00000ba6 <__subsf3>:
     ba6:	50 58       	subi	r21, 0x80	; 128

00000ba8 <__addsf3>:
     ba8:	bb 27       	eor	r27, r27
     baa:	aa 27       	eor	r26, r26
     bac:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__addsf3x>
     bb0:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     bb4:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     bb8:	38 f0       	brcs	.+14     	; 0xbc8 <__addsf3+0x20>
     bba:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__addsf3+0x20>
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__addsf3+0x28>
     bc2:	9f 3f       	cpi	r25, 0xFF	; 255
     bc4:	19 f4       	brne	.+6      	; 0xbcc <__addsf3+0x24>
     bc6:	26 f4       	brtc	.+8      	; 0xbd0 <__addsf3+0x28>
     bc8:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     bcc:	0e f4       	brtc	.+2      	; 0xbd0 <__addsf3+0x28>
     bce:	e0 95       	com	r30
     bd0:	e7 fb       	bst	r30, 7
     bd2:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>

00000bd6 <__addsf3x>:
     bd6:	e9 2f       	mov	r30, r25
     bd8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     bdc:	58 f3       	brcs	.-42     	; 0xbb4 <__addsf3+0xc>
     bde:	ba 17       	cp	r27, r26
     be0:	62 07       	cpc	r22, r18
     be2:	73 07       	cpc	r23, r19
     be4:	84 07       	cpc	r24, r20
     be6:	95 07       	cpc	r25, r21
     be8:	20 f0       	brcs	.+8      	; 0xbf2 <__addsf3x+0x1c>
     bea:	79 f4       	brne	.+30     	; 0xc0a <__addsf3x+0x34>
     bec:	a6 f5       	brtc	.+104    	; 0xc56 <__addsf3x+0x80>
     bee:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     bf2:	0e f4       	brtc	.+2      	; 0xbf6 <__addsf3x+0x20>
     bf4:	e0 95       	com	r30
     bf6:	0b 2e       	mov	r0, r27
     bf8:	ba 2f       	mov	r27, r26
     bfa:	a0 2d       	mov	r26, r0
     bfc:	0b 01       	movw	r0, r22
     bfe:	b9 01       	movw	r22, r18
     c00:	90 01       	movw	r18, r0
     c02:	0c 01       	movw	r0, r24
     c04:	ca 01       	movw	r24, r20
     c06:	a0 01       	movw	r20, r0
     c08:	11 24       	eor	r1, r1
     c0a:	ff 27       	eor	r31, r31
     c0c:	59 1b       	sub	r21, r25
     c0e:	99 f0       	breq	.+38     	; 0xc36 <__addsf3x+0x60>
     c10:	59 3f       	cpi	r21, 0xF9	; 249
     c12:	50 f4       	brcc	.+20     	; 0xc28 <__addsf3x+0x52>
     c14:	50 3e       	cpi	r21, 0xE0	; 224
     c16:	68 f1       	brcs	.+90     	; 0xc72 <__addsf3x+0x9c>
     c18:	1a 16       	cp	r1, r26
     c1a:	f0 40       	sbci	r31, 0x00	; 0
     c1c:	a2 2f       	mov	r26, r18
     c1e:	23 2f       	mov	r18, r19
     c20:	34 2f       	mov	r19, r20
     c22:	44 27       	eor	r20, r20
     c24:	58 5f       	subi	r21, 0xF8	; 248
     c26:	f3 cf       	rjmp	.-26     	; 0xc0e <__addsf3x+0x38>
     c28:	46 95       	lsr	r20
     c2a:	37 95       	ror	r19
     c2c:	27 95       	ror	r18
     c2e:	a7 95       	ror	r26
     c30:	f0 40       	sbci	r31, 0x00	; 0
     c32:	53 95       	inc	r21
     c34:	c9 f7       	brne	.-14     	; 0xc28 <__addsf3x+0x52>
     c36:	7e f4       	brtc	.+30     	; 0xc56 <__addsf3x+0x80>
     c38:	1f 16       	cp	r1, r31
     c3a:	ba 0b       	sbc	r27, r26
     c3c:	62 0b       	sbc	r22, r18
     c3e:	73 0b       	sbc	r23, r19
     c40:	84 0b       	sbc	r24, r20
     c42:	ba f0       	brmi	.+46     	; 0xc72 <__addsf3x+0x9c>
     c44:	91 50       	subi	r25, 0x01	; 1
     c46:	a1 f0       	breq	.+40     	; 0xc70 <__addsf3x+0x9a>
     c48:	ff 0f       	add	r31, r31
     c4a:	bb 1f       	adc	r27, r27
     c4c:	66 1f       	adc	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	88 1f       	adc	r24, r24
     c52:	c2 f7       	brpl	.-16     	; 0xc44 <__addsf3x+0x6e>
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <__addsf3x+0x9c>
     c56:	ba 0f       	add	r27, r26
     c58:	62 1f       	adc	r22, r18
     c5a:	73 1f       	adc	r23, r19
     c5c:	84 1f       	adc	r24, r20
     c5e:	48 f4       	brcc	.+18     	; 0xc72 <__addsf3x+0x9c>
     c60:	87 95       	ror	r24
     c62:	77 95       	ror	r23
     c64:	67 95       	ror	r22
     c66:	b7 95       	ror	r27
     c68:	f7 95       	ror	r31
     c6a:	9e 3f       	cpi	r25, 0xFE	; 254
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <__addsf3x+0x9a>
     c6e:	b0 cf       	rjmp	.-160    	; 0xbd0 <__addsf3+0x28>
     c70:	93 95       	inc	r25
     c72:	88 0f       	add	r24, r24
     c74:	08 f0       	brcs	.+2      	; 0xc78 <__addsf3x+0xa2>
     c76:	99 27       	eor	r25, r25
     c78:	ee 0f       	add	r30, r30
     c7a:	97 95       	ror	r25
     c7c:	87 95       	ror	r24
     c7e:	08 95       	ret

00000c80 <__cmpsf2>:
     c80:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_cmp>
     c84:	08 f4       	brcc	.+2      	; 0xc88 <__cmpsf2+0x8>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	08 95       	ret

00000c8a <__fixunssfsi>:
     c8a:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
     c8e:	88 f0       	brcs	.+34     	; 0xcb2 <__fixunssfsi+0x28>
     c90:	9f 57       	subi	r25, 0x7F	; 127
     c92:	98 f0       	brcs	.+38     	; 0xcba <__fixunssfsi+0x30>
     c94:	b9 2f       	mov	r27, r25
     c96:	99 27       	eor	r25, r25
     c98:	b7 51       	subi	r27, 0x17	; 23
     c9a:	b0 f0       	brcs	.+44     	; 0xcc8 <__fixunssfsi+0x3e>
     c9c:	e1 f0       	breq	.+56     	; 0xcd6 <__fixunssfsi+0x4c>
     c9e:	66 0f       	add	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	88 1f       	adc	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	1a f0       	brmi	.+6      	; 0xcae <__fixunssfsi+0x24>
     ca8:	ba 95       	dec	r27
     caa:	c9 f7       	brne	.-14     	; 0xc9e <__fixunssfsi+0x14>
     cac:	14 c0       	rjmp	.+40     	; 0xcd6 <__fixunssfsi+0x4c>
     cae:	b1 30       	cpi	r27, 0x01	; 1
     cb0:	91 f0       	breq	.+36     	; 0xcd6 <__fixunssfsi+0x4c>
     cb2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_zero>
     cb6:	b1 e0       	ldi	r27, 0x01	; 1
     cb8:	08 95       	ret
     cba:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     cbe:	67 2f       	mov	r22, r23
     cc0:	78 2f       	mov	r23, r24
     cc2:	88 27       	eor	r24, r24
     cc4:	b8 5f       	subi	r27, 0xF8	; 248
     cc6:	39 f0       	breq	.+14     	; 0xcd6 <__fixunssfsi+0x4c>
     cc8:	b9 3f       	cpi	r27, 0xF9	; 249
     cca:	cc f3       	brlt	.-14     	; 0xcbe <__fixunssfsi+0x34>
     ccc:	86 95       	lsr	r24
     cce:	77 95       	ror	r23
     cd0:	67 95       	ror	r22
     cd2:	b3 95       	inc	r27
     cd4:	d9 f7       	brne	.-10     	; 0xccc <__fixunssfsi+0x42>
     cd6:	3e f4       	brtc	.+14     	; 0xce6 <__fixunssfsi+0x5c>
     cd8:	90 95       	com	r25
     cda:	80 95       	com	r24
     cdc:	70 95       	com	r23
     cde:	61 95       	neg	r22
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	8f 4f       	sbci	r24, 0xFF	; 255
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	08 95       	ret

00000ce8 <__floatunsisf>:
     ce8:	e8 94       	clt
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <__floatsisf+0x12>

00000cec <__floatsisf>:
     cec:	97 fb       	bst	r25, 7
     cee:	3e f4       	brtc	.+14     	; 0xcfe <__floatsisf+0x12>
     cf0:	90 95       	com	r25
     cf2:	80 95       	com	r24
     cf4:	70 95       	com	r23
     cf6:	61 95       	neg	r22
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	8f 4f       	sbci	r24, 0xFF	; 255
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	99 23       	and	r25, r25
     d00:	a9 f0       	breq	.+42     	; 0xd2c <__floatsisf+0x40>
     d02:	f9 2f       	mov	r31, r25
     d04:	96 e9       	ldi	r25, 0x96	; 150
     d06:	bb 27       	eor	r27, r27
     d08:	93 95       	inc	r25
     d0a:	f6 95       	lsr	r31
     d0c:	87 95       	ror	r24
     d0e:	77 95       	ror	r23
     d10:	67 95       	ror	r22
     d12:	b7 95       	ror	r27
     d14:	f1 11       	cpse	r31, r1
     d16:	f8 cf       	rjmp	.-16     	; 0xd08 <__floatsisf+0x1c>
     d18:	fa f4       	brpl	.+62     	; 0xd58 <__floatsisf+0x6c>
     d1a:	bb 0f       	add	r27, r27
     d1c:	11 f4       	brne	.+4      	; 0xd22 <__floatsisf+0x36>
     d1e:	60 ff       	sbrs	r22, 0
     d20:	1b c0       	rjmp	.+54     	; 0xd58 <__floatsisf+0x6c>
     d22:	6f 5f       	subi	r22, 0xFF	; 255
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	8f 4f       	sbci	r24, 0xFF	; 255
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	16 c0       	rjmp	.+44     	; 0xd58 <__floatsisf+0x6c>
     d2c:	88 23       	and	r24, r24
     d2e:	11 f0       	breq	.+4      	; 0xd34 <__floatsisf+0x48>
     d30:	96 e9       	ldi	r25, 0x96	; 150
     d32:	11 c0       	rjmp	.+34     	; 0xd56 <__floatsisf+0x6a>
     d34:	77 23       	and	r23, r23
     d36:	21 f0       	breq	.+8      	; 0xd40 <__floatsisf+0x54>
     d38:	9e e8       	ldi	r25, 0x8E	; 142
     d3a:	87 2f       	mov	r24, r23
     d3c:	76 2f       	mov	r23, r22
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <__floatsisf+0x5e>
     d40:	66 23       	and	r22, r22
     d42:	71 f0       	breq	.+28     	; 0xd60 <__floatsisf+0x74>
     d44:	96 e8       	ldi	r25, 0x86	; 134
     d46:	86 2f       	mov	r24, r22
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	2a f0       	brmi	.+10     	; 0xd58 <__floatsisf+0x6c>
     d4e:	9a 95       	dec	r25
     d50:	66 0f       	add	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	da f7       	brpl	.-10     	; 0xd4e <__floatsisf+0x62>
     d58:	88 0f       	add	r24, r24
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	97 f9       	bld	r25, 7
     d60:	08 95       	ret

00000d62 <__fp_cmp>:
     d62:	99 0f       	add	r25, r25
     d64:	00 08       	sbc	r0, r0
     d66:	55 0f       	add	r21, r21
     d68:	aa 0b       	sbc	r26, r26
     d6a:	e0 e8       	ldi	r30, 0x80	; 128
     d6c:	fe ef       	ldi	r31, 0xFE	; 254
     d6e:	16 16       	cp	r1, r22
     d70:	17 06       	cpc	r1, r23
     d72:	e8 07       	cpc	r30, r24
     d74:	f9 07       	cpc	r31, r25
     d76:	c0 f0       	brcs	.+48     	; 0xda8 <__fp_cmp+0x46>
     d78:	12 16       	cp	r1, r18
     d7a:	13 06       	cpc	r1, r19
     d7c:	e4 07       	cpc	r30, r20
     d7e:	f5 07       	cpc	r31, r21
     d80:	98 f0       	brcs	.+38     	; 0xda8 <__fp_cmp+0x46>
     d82:	62 1b       	sub	r22, r18
     d84:	73 0b       	sbc	r23, r19
     d86:	84 0b       	sbc	r24, r20
     d88:	95 0b       	sbc	r25, r21
     d8a:	39 f4       	brne	.+14     	; 0xd9a <__fp_cmp+0x38>
     d8c:	0a 26       	eor	r0, r26
     d8e:	61 f0       	breq	.+24     	; 0xda8 <__fp_cmp+0x46>
     d90:	23 2b       	or	r18, r19
     d92:	24 2b       	or	r18, r20
     d94:	25 2b       	or	r18, r21
     d96:	21 f4       	brne	.+8      	; 0xda0 <__fp_cmp+0x3e>
     d98:	08 95       	ret
     d9a:	0a 26       	eor	r0, r26
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__fp_cmp+0x3e>
     d9e:	a1 40       	sbci	r26, 0x01	; 1
     da0:	a6 95       	lsr	r26
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	81 1d       	adc	r24, r1
     da6:	81 1d       	adc	r24, r1
     da8:	08 95       	ret

00000daa <__fp_inf>:
     daa:	97 f9       	bld	r25, 7
     dac:	9f 67       	ori	r25, 0x7F	; 127
     dae:	80 e8       	ldi	r24, 0x80	; 128
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	08 95       	ret

00000db6 <__fp_nan>:
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	80 ec       	ldi	r24, 0xC0	; 192
     dba:	08 95       	ret

00000dbc <__fp_pscA>:
     dbc:	00 24       	eor	r0, r0
     dbe:	0a 94       	dec	r0
     dc0:	16 16       	cp	r1, r22
     dc2:	17 06       	cpc	r1, r23
     dc4:	18 06       	cpc	r1, r24
     dc6:	09 06       	cpc	r0, r25
     dc8:	08 95       	ret

00000dca <__fp_pscB>:
     dca:	00 24       	eor	r0, r0
     dcc:	0a 94       	dec	r0
     dce:	12 16       	cp	r1, r18
     dd0:	13 06       	cpc	r1, r19
     dd2:	14 06       	cpc	r1, r20
     dd4:	05 06       	cpc	r0, r21
     dd6:	08 95       	ret

00000dd8 <__fp_round>:
     dd8:	09 2e       	mov	r0, r25
     dda:	03 94       	inc	r0
     ddc:	00 0c       	add	r0, r0
     dde:	11 f4       	brne	.+4      	; 0xde4 <__fp_round+0xc>
     de0:	88 23       	and	r24, r24
     de2:	52 f0       	brmi	.+20     	; 0xdf8 <__fp_round+0x20>
     de4:	bb 0f       	add	r27, r27
     de6:	40 f4       	brcc	.+16     	; 0xdf8 <__fp_round+0x20>
     de8:	bf 2b       	or	r27, r31
     dea:	11 f4       	brne	.+4      	; 0xdf0 <__fp_round+0x18>
     dec:	60 ff       	sbrs	r22, 0
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__fp_round+0x20>
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	8f 4f       	sbci	r24, 0xFF	; 255
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	08 95       	ret

00000dfa <__fp_split3>:
     dfa:	57 fd       	sbrc	r21, 7
     dfc:	90 58       	subi	r25, 0x80	; 128
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	59 f0       	breq	.+22     	; 0xe1a <__fp_splitA+0x10>
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	71 f0       	breq	.+28     	; 0xe24 <__fp_splitA+0x1a>
     e08:	47 95       	ror	r20

00000e0a <__fp_splitA>:
     e0a:	88 0f       	add	r24, r24
     e0c:	97 fb       	bst	r25, 7
     e0e:	99 1f       	adc	r25, r25
     e10:	61 f0       	breq	.+24     	; 0xe2a <__fp_splitA+0x20>
     e12:	9f 3f       	cpi	r25, 0xFF	; 255
     e14:	79 f0       	breq	.+30     	; 0xe34 <__fp_splitA+0x2a>
     e16:	87 95       	ror	r24
     e18:	08 95       	ret
     e1a:	12 16       	cp	r1, r18
     e1c:	13 06       	cpc	r1, r19
     e1e:	14 06       	cpc	r1, r20
     e20:	55 1f       	adc	r21, r21
     e22:	f2 cf       	rjmp	.-28     	; 0xe08 <__fp_split3+0xe>
     e24:	46 95       	lsr	r20
     e26:	f1 df       	rcall	.-30     	; 0xe0a <__fp_splitA>
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <__fp_splitA+0x30>
     e2a:	16 16       	cp	r1, r22
     e2c:	17 06       	cpc	r1, r23
     e2e:	18 06       	cpc	r1, r24
     e30:	99 1f       	adc	r25, r25
     e32:	f1 cf       	rjmp	.-30     	; 0xe16 <__fp_splitA+0xc>
     e34:	86 95       	lsr	r24
     e36:	71 05       	cpc	r23, r1
     e38:	61 05       	cpc	r22, r1
     e3a:	08 94       	sec
     e3c:	08 95       	ret

00000e3e <__fp_zero>:
     e3e:	e8 94       	clt

00000e40 <__fp_szero>:
     e40:	bb 27       	eor	r27, r27
     e42:	66 27       	eor	r22, r22
     e44:	77 27       	eor	r23, r23
     e46:	cb 01       	movw	r24, r22
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret

00000e4c <__gesf2>:
     e4c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_cmp>
     e50:	08 f4       	brcc	.+2      	; 0xe54 <__gesf2+0x8>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	08 95       	ret

00000e56 <__mulsf3>:
     e56:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__mulsf3x>
     e5a:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     e5e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     e62:	38 f0       	brcs	.+14     	; 0xe72 <__mulsf3+0x1c>
     e64:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__mulsf3+0x1c>
     e6a:	95 23       	and	r25, r21
     e6c:	11 f0       	breq	.+4      	; 0xe72 <__mulsf3+0x1c>
     e6e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     e72:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     e76:	11 24       	eor	r1, r1
     e78:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>

00000e7c <__mulsf3x>:
     e7c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     e80:	70 f3       	brcs	.-36     	; 0xe5e <__mulsf3+0x8>

00000e82 <__mulsf3_pse>:
     e82:	95 9f       	mul	r25, r21
     e84:	c1 f3       	breq	.-16     	; 0xe76 <__mulsf3+0x20>
     e86:	95 0f       	add	r25, r21
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	55 1f       	adc	r21, r21
     e8c:	62 9f       	mul	r22, r18
     e8e:	f0 01       	movw	r30, r0
     e90:	72 9f       	mul	r23, r18
     e92:	bb 27       	eor	r27, r27
     e94:	f0 0d       	add	r31, r0
     e96:	b1 1d       	adc	r27, r1
     e98:	63 9f       	mul	r22, r19
     e9a:	aa 27       	eor	r26, r26
     e9c:	f0 0d       	add	r31, r0
     e9e:	b1 1d       	adc	r27, r1
     ea0:	aa 1f       	adc	r26, r26
     ea2:	64 9f       	mul	r22, r20
     ea4:	66 27       	eor	r22, r22
     ea6:	b0 0d       	add	r27, r0
     ea8:	a1 1d       	adc	r26, r1
     eaa:	66 1f       	adc	r22, r22
     eac:	82 9f       	mul	r24, r18
     eae:	22 27       	eor	r18, r18
     eb0:	b0 0d       	add	r27, r0
     eb2:	a1 1d       	adc	r26, r1
     eb4:	62 1f       	adc	r22, r18
     eb6:	73 9f       	mul	r23, r19
     eb8:	b0 0d       	add	r27, r0
     eba:	a1 1d       	adc	r26, r1
     ebc:	62 1f       	adc	r22, r18
     ebe:	83 9f       	mul	r24, r19
     ec0:	a0 0d       	add	r26, r0
     ec2:	61 1d       	adc	r22, r1
     ec4:	22 1f       	adc	r18, r18
     ec6:	74 9f       	mul	r23, r20
     ec8:	33 27       	eor	r19, r19
     eca:	a0 0d       	add	r26, r0
     ecc:	61 1d       	adc	r22, r1
     ece:	23 1f       	adc	r18, r19
     ed0:	84 9f       	mul	r24, r20
     ed2:	60 0d       	add	r22, r0
     ed4:	21 1d       	adc	r18, r1
     ed6:	82 2f       	mov	r24, r18
     ed8:	76 2f       	mov	r23, r22
     eda:	6a 2f       	mov	r22, r26
     edc:	11 24       	eor	r1, r1
     ede:	9f 57       	subi	r25, 0x7F	; 127
     ee0:	50 40       	sbci	r21, 0x00	; 0
     ee2:	9a f0       	brmi	.+38     	; 0xf0a <__mulsf3_pse+0x88>
     ee4:	f1 f0       	breq	.+60     	; 0xf22 <__mulsf3_pse+0xa0>
     ee6:	88 23       	and	r24, r24
     ee8:	4a f0       	brmi	.+18     	; 0xefc <__mulsf3_pse+0x7a>
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	bb 1f       	adc	r27, r27
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	91 50       	subi	r25, 0x01	; 1
     ef8:	50 40       	sbci	r21, 0x00	; 0
     efa:	a9 f7       	brne	.-22     	; 0xee6 <__mulsf3_pse+0x64>
     efc:	9e 3f       	cpi	r25, 0xFE	; 254
     efe:	51 05       	cpc	r21, r1
     f00:	80 f0       	brcs	.+32     	; 0xf22 <__mulsf3_pse+0xa0>
     f02:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     f06:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     f0a:	5f 3f       	cpi	r21, 0xFF	; 255
     f0c:	e4 f3       	brlt	.-8      	; 0xf06 <__mulsf3_pse+0x84>
     f0e:	98 3e       	cpi	r25, 0xE8	; 232
     f10:	d4 f3       	brlt	.-12     	; 0xf06 <__mulsf3_pse+0x84>
     f12:	86 95       	lsr	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b7 95       	ror	r27
     f1a:	f7 95       	ror	r31
     f1c:	e7 95       	ror	r30
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	c1 f7       	brne	.-16     	; 0xf12 <__mulsf3_pse+0x90>
     f22:	fe 2b       	or	r31, r30
     f24:	88 0f       	add	r24, r24
     f26:	91 1d       	adc	r25, r1
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	97 f9       	bld	r25, 7
     f2e:	08 95       	ret

00000f30 <__tablejump2__>:
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	05 90       	lpm	r0, Z+
     f36:	f4 91       	lpm	r31, Z
     f38:	e0 2d       	mov	r30, r0
     f3a:	09 94       	ijmp

00000f3c <__adddi3>:
     f3c:	2a 0d       	add	r18, r10
     f3e:	3b 1d       	adc	r19, r11
     f40:	4c 1d       	adc	r20, r12
     f42:	5d 1d       	adc	r21, r13
     f44:	6e 1d       	adc	r22, r14
     f46:	7f 1d       	adc	r23, r15
     f48:	80 1f       	adc	r24, r16
     f4a:	91 1f       	adc	r25, r17
     f4c:	08 95       	ret

00000f4e <__adddi3_s8>:
     f4e:	00 24       	eor	r0, r0
     f50:	a7 fd       	sbrc	r26, 7
     f52:	00 94       	com	r0
     f54:	2a 0f       	add	r18, r26
     f56:	30 1d       	adc	r19, r0
     f58:	40 1d       	adc	r20, r0
     f5a:	50 1d       	adc	r21, r0
     f5c:	60 1d       	adc	r22, r0
     f5e:	70 1d       	adc	r23, r0
     f60:	80 1d       	adc	r24, r0
     f62:	90 1d       	adc	r25, r0
     f64:	08 95       	ret

00000f66 <__subdi3>:
     f66:	2a 19       	sub	r18, r10
     f68:	3b 09       	sbc	r19, r11
     f6a:	4c 09       	sbc	r20, r12
     f6c:	5d 09       	sbc	r21, r13
     f6e:	6e 09       	sbc	r22, r14
     f70:	7f 09       	sbc	r23, r15
     f72:	80 0b       	sbc	r24, r16
     f74:	91 0b       	sbc	r25, r17
     f76:	08 95       	ret

00000f78 <__cmpdi2>:
     f78:	2a 15       	cp	r18, r10
     f7a:	3b 05       	cpc	r19, r11
     f7c:	4c 05       	cpc	r20, r12
     f7e:	5d 05       	cpc	r21, r13
     f80:	6e 05       	cpc	r22, r14
     f82:	7f 05       	cpc	r23, r15
     f84:	80 07       	cpc	r24, r16
     f86:	91 07       	cpc	r25, r17
     f88:	08 95       	ret

00000f8a <fwrite>:
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb ec       	ldi	r30, 0xCB	; 203
     f90:	f7 e0       	ldi	r31, 0x07	; 7
     f92:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__prologue_saves__+0xc>
     f96:	5b 01       	movw	r10, r22
     f98:	4a 01       	movw	r8, r20
     f9a:	79 01       	movw	r14, r18
     f9c:	d9 01       	movw	r26, r18
     f9e:	13 96       	adiw	r26, 0x03	; 3
     fa0:	2c 91       	ld	r18, X
     fa2:	21 ff       	sbrs	r18, 1
     fa4:	1d c0       	rjmp	.+58     	; 0xfe0 <fwrite+0x56>
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
     faa:	c8 15       	cp	r28, r8
     fac:	d9 05       	cpc	r29, r9
     fae:	d9 f0       	breq	.+54     	; 0xfe6 <fwrite+0x5c>
     fb0:	8c 01       	movw	r16, r24
     fb2:	6c 01       	movw	r12, r24
     fb4:	ca 0c       	add	r12, r10
     fb6:	db 1c       	adc	r13, r11
     fb8:	c8 01       	movw	r24, r16
     fba:	0c 15       	cp	r16, r12
     fbc:	1d 05       	cpc	r17, r13
     fbe:	71 f0       	breq	.+28     	; 0xfdc <fwrite+0x52>
     fc0:	0f 5f       	subi	r16, 0xFF	; 255
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	d7 01       	movw	r26, r14
     fc6:	18 96       	adiw	r26, 0x08	; 8
     fc8:	ed 91       	ld	r30, X+
     fca:	fc 91       	ld	r31, X
     fcc:	19 97       	sbiw	r26, 0x09	; 9
     fce:	b7 01       	movw	r22, r14
     fd0:	dc 01       	movw	r26, r24
     fd2:	8c 91       	ld	r24, X
     fd4:	09 95       	icall
     fd6:	89 2b       	or	r24, r25
     fd8:	79 f3       	breq	.-34     	; 0xfb8 <fwrite+0x2e>
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <fwrite+0x5c>
     fdc:	21 96       	adiw	r28, 0x01	; 1
     fde:	e5 cf       	rjmp	.-54     	; 0xfaa <fwrite+0x20>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <fwrite+0x5e>
     fe6:	ce 01       	movw	r24, r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	ec e0       	ldi	r30, 0x0C	; 12
     fee:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__epilogue_restores__+0xc>

00000ff2 <puts>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <__iob+0x2>
     ffe:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <__iob+0x3>
    1002:	23 81       	ldd	r18, Z+3	; 0x03
    1004:	21 ff       	sbrs	r18, 1
    1006:	1b c0       	rjmp	.+54     	; 0x103e <puts+0x4c>
    1008:	8c 01       	movw	r16, r24
    100a:	d0 e0       	ldi	r29, 0x00	; 0
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	f8 01       	movw	r30, r16
    1010:	81 91       	ld	r24, Z+
    1012:	8f 01       	movw	r16, r30
    1014:	60 91 df 01 	lds	r22, 0x01DF	; 0x8001df <__iob+0x2>
    1018:	70 91 e0 01 	lds	r23, 0x01E0	; 0x8001e0 <__iob+0x3>
    101c:	db 01       	movw	r26, r22
    101e:	18 96       	adiw	r26, 0x08	; 8
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	19 97       	sbiw	r26, 0x09	; 9
    1026:	88 23       	and	r24, r24
    1028:	31 f0       	breq	.+12     	; 0x1036 <puts+0x44>
    102a:	09 95       	icall
    102c:	89 2b       	or	r24, r25
    102e:	79 f3       	breq	.-34     	; 0x100e <puts+0x1c>
    1030:	df ef       	ldi	r29, 0xFF	; 255
    1032:	cf ef       	ldi	r28, 0xFF	; 255
    1034:	ec cf       	rjmp	.-40     	; 0x100e <puts+0x1c>
    1036:	8a e0       	ldi	r24, 0x0A	; 10
    1038:	09 95       	icall
    103a:	89 2b       	or	r24, r25
    103c:	19 f0       	breq	.+6      	; 0x1044 <puts+0x52>
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <puts+0x56>
    1044:	8d 2f       	mov	r24, r29
    1046:	9c 2f       	mov	r25, r28
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <__prologue_saves__>:
    1052:	2f 92       	push	r2
    1054:	3f 92       	push	r3
    1056:	4f 92       	push	r4
    1058:	5f 92       	push	r5
    105a:	6f 92       	push	r6
    105c:	7f 92       	push	r7
    105e:	8f 92       	push	r8
    1060:	9f 92       	push	r9
    1062:	af 92       	push	r10
    1064:	bf 92       	push	r11
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	ca 1b       	sub	r28, r26
    107c:	db 0b       	sbc	r29, r27
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	09 94       	ijmp

0000108a <__epilogue_restores__>:
    108a:	2a 88       	ldd	r2, Y+18	; 0x12
    108c:	39 88       	ldd	r3, Y+17	; 0x11
    108e:	48 88       	ldd	r4, Y+16	; 0x10
    1090:	5f 84       	ldd	r5, Y+15	; 0x0f
    1092:	6e 84       	ldd	r6, Y+14	; 0x0e
    1094:	7d 84       	ldd	r7, Y+13	; 0x0d
    1096:	8c 84       	ldd	r8, Y+12	; 0x0c
    1098:	9b 84       	ldd	r9, Y+11	; 0x0b
    109a:	aa 84       	ldd	r10, Y+10	; 0x0a
    109c:	b9 84       	ldd	r11, Y+9	; 0x09
    109e:	c8 84       	ldd	r12, Y+8	; 0x08
    10a0:	df 80       	ldd	r13, Y+7	; 0x07
    10a2:	ee 80       	ldd	r14, Y+6	; 0x06
    10a4:	fd 80       	ldd	r15, Y+5	; 0x05
    10a6:	0c 81       	ldd	r16, Y+4	; 0x04
    10a8:	1b 81       	ldd	r17, Y+3	; 0x03
    10aa:	aa 81       	ldd	r26, Y+2	; 0x02
    10ac:	b9 81       	ldd	r27, Y+1	; 0x01
    10ae:	ce 0f       	add	r28, r30
    10b0:	d1 1d       	adc	r29, r1
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	ed 01       	movw	r28, r26
    10be:	08 95       	ret

000010c0 <_exit>:
    10c0:	f8 94       	cli

000010c2 <__stop_program>:
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <__stop_program>
