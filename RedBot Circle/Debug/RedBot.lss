
RedBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000de8  00000e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080011c  0080011c  00000e98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001564  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dca  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd2  00000000  00000000  000033ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  00004080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b1d  00000000  00000000  00004b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005682  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_7>
  20:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_8>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_11>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_14>
  3c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_15>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	a5 00       	.word	0x00a5	; ????
  6a:	b2 00       	.word	0x00b2	; ????
  6c:	bb 00       	.word	0x00bb	; ????
  6e:	c8 00       	.word	0x00c8	; ????
  70:	d5 00       	.word	0x00d5	; ????
  72:	de 00       	.word	0x00de	; ????
  74:	eb 00       	.word	0x00eb	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 ee       	ldi	r30, 0xE8	; 232
  8a:	fd e0       	ldi	r31, 0x0D	; 13
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 31       	cpi	r26, 0x1C	; 28
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ac e1       	ldi	r26, 0x1C	; 28
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 3a       	cpi	r26, 0xA6	; 166
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  ac:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <ADC_Init>:
/* Function Definitions */
void ADC_Init(void) {
	// The Power Reduction ADC bit in the Power Reduction Register (PRR0.PRADC) must be written to '0' in order to enable the ADC.
	//PRR0 = (0 << PRADC);
	
	ADCSRA = 0b011;			// 128x prescaler
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// Enable
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <ADC_SetChannel>:
}

void ADC_SetChannel(uint8_t channel) {
	ADMUX = 0b01000000 | channel;
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ca:	08 95       	ret

000000cc <ADC_ReadRaw>:
}

unsigned int ADC_ReadRaw(void) {
	// Start conversion
	ADCSRA |= (1 << ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	
	// Wait until conversion finished
	loop_until_bit_is_clear(ADCSRA, ADSC);
  d6:	80 81       	ld	r24, Z
  d8:	86 fd       	sbrc	r24, 6
  da:	fd cf       	rjmp	.-6      	; 0xd6 <ADC_ReadRaw+0xa>
	
	return ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  e4:	08 95       	ret

000000e6 <ADC_ReadVoltage>:

double ADC_ReadVoltage(void) {
	unsigned int raw = ADC_ReadRaw();
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_ReadRaw>
	return raw * (5.0/1024);
  ea:	bc 01       	movw	r22, r24
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 21 05 	call	0xa42	; 0xa42 <__floatunsisf>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 ea       	ldi	r20, 0xA0	; 160
  fa:	5b e3       	ldi	r21, 0x3B	; 59
  fc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
 100:	08 95       	ret

00000102 <PID_Loop>:
static uint64_t tick = 0;
static uint64_t last_tick = 0;
static uint64_t dt = 0;

/* Function Definitions */
void PID_Loop() {
 102:	4f 92       	push	r4
 104:	5f 92       	push	r5
 106:	6f 92       	push	r6
 108:	7f 92       	push	r7
 10a:	8f 92       	push	r8
 10c:	9f 92       	push	r9
 10e:	af 92       	push	r10
 110:	bf 92       	push	r11
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
	//last_tick = tick;
	//tick = Timer_GetSysTick();
	//dt = tick - last_tick;
	
	/* Calculate Error */
	last_error = error;	// Last error
 11a:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <error>
 11e:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <error+0x1>
 122:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <error+0x2>
 126:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <error+0x3>
	
	switch (_sensors_current.combined) {
 12a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_sensors_current+0xc>
 12e:	e8 2f       	mov	r30, r24
 130:	e7 70       	andi	r30, 0x07	; 7
 132:	8e 2f       	mov	r24, r30
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	e7 30       	cpi	r30, 0x07	; 7
 13c:	f1 05       	cpc	r31, r1
 13e:	08 f0       	brcs	.+2      	; 0x142 <PID_Loop+0x40>
 140:	52 c0       	rjmp	.+164    	; 0x1e6 <PID_Loop+0xe4>
 142:	ec 5c       	subi	r30, 0xCC	; 204
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__tablejump2__>
		case 0b000:
			error = last_error;
			break;
		case 0b001:
			error = 2;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b0 e4       	ldi	r27, 0x40	; 64
 152:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <error>
 156:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <error+0x1>
 15a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <error+0x2>
 15e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <error+0x3>
			break;
 162:	41 c0       	rjmp	.+130    	; 0x1e6 <PID_Loop+0xe4>
		case 0b010:
			error = 0;
 164:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <error>
 168:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <error+0x1>
 16c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <error+0x2>
 170:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <error+0x3>
			break;
 174:	38 c0       	rjmp	.+112    	; 0x1e6 <PID_Loop+0xe4>
		case 0b011:
			error = 1;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a0 e8       	ldi	r26, 0x80	; 128
 17c:	bf e3       	ldi	r27, 0x3F	; 63
 17e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <error>
 182:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <error+0x1>
 186:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <error+0x2>
 18a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <error+0x3>
			break;
 18e:	2b c0       	rjmp	.+86     	; 0x1e6 <PID_Loop+0xe4>
		case 0b100:
			error = -2;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a0 e0       	ldi	r26, 0x00	; 0
 196:	b0 ec       	ldi	r27, 0xC0	; 192
 198:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <error>
 19c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <error+0x1>
 1a0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <error+0x2>
 1a4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <error+0x3>
			break;
 1a8:	1e c0       	rjmp	.+60     	; 0x1e6 <PID_Loop+0xe4>
		case 0b101:
			error = 0;
 1aa:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <error>
 1ae:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <error+0x1>
 1b2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <error+0x2>
 1b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <error+0x3>
			break;
 1ba:	15 c0       	rjmp	.+42     	; 0x1e6 <PID_Loop+0xe4>
		case 0b110:
			error = -1;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	a0 e8       	ldi	r26, 0x80	; 128
 1c2:	bf eb       	ldi	r27, 0xBF	; 191
 1c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <error>
 1c8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <error+0x1>
 1cc:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <error+0x2>
 1d0:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <error+0x3>
			break;
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <PID_Loop+0xe4>
		case 0b111:
			error = 0;		
 1d6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <error>
 1da:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <error+0x1>
 1de:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <error+0x2>
 1e2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <error+0x3>
	}
	//error_d = (error - last_error) / dt;
	error_d = error - last_error;
 1e6:	80 90 20 01 	lds	r8, 0x0120	; 0x800120 <error>
 1ea:	90 90 21 01 	lds	r9, 0x0121	; 0x800121 <error+0x1>
 1ee:	a0 90 22 01 	lds	r10, 0x0122	; 0x800122 <error+0x2>
 1f2:	b0 90 23 01 	lds	r11, 0x0123	; 0x800123 <error+0x3>
	error_i += error;
 1f6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 1fa:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
 1fe:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_end+0x2>
 202:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_end+0x3>
 206:	c5 01       	movw	r24, r10
 208:	b4 01       	movw	r22, r8
 20a:	0e 94 81 04 	call	0x902	; 0x902 <__addsf3>
 20e:	2b 01       	movw	r4, r22
 210:	3c 01       	movw	r6, r24
 212:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_end>
 216:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_end+0x1>
 21a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end+0x2>
 21e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x3>
	speed = KP*error + KD*error_d + KI*error_i;	// Calculate new motor speed
 222:	a7 01       	movw	r20, r14
 224:	96 01       	movw	r18, r12
 226:	c5 01       	movw	r24, r10
 228:	b4 01       	movw	r22, r8
 22a:	0e 94 80 04 	call	0x900	; 0x900 <__subsf3>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	a9 01       	movw	r20, r18
 234:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
 238:	6b 01       	movw	r12, r22
 23a:	7c 01       	movw	r14, r24
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	5f e3       	ldi	r21, 0x3F	; 63
 244:	c5 01       	movw	r24, r10
 246:	b4 01       	movw	r22, r8
 248:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
 24c:	9b 01       	movw	r18, r22
 24e:	ac 01       	movw	r20, r24
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	0e 94 81 04 	call	0x902	; 0x902 <__addsf3>
 258:	6b 01       	movw	r12, r22
 25a:	7c 01       	movw	r14, r24
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	a9 01       	movw	r20, r18
 262:	c3 01       	movw	r24, r6
 264:	b2 01       	movw	r22, r4
 266:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
 26a:	9b 01       	movw	r18, r22
 26c:	ac 01       	movw	r20, r24
 26e:	c7 01       	movw	r24, r14
 270:	b6 01       	movw	r22, r12
 272:	0e 94 81 04 	call	0x902	; 0x902 <__addsf3>
 276:	6b 01       	movw	r12, r22
 278:	7c 01       	movw	r14, r24
	
	/* Set L/R motor speed
	 * Error > 0 when we need to turn right
	 * Error < 0 when we need to turn left */
	Motor_SetDuty(MAX_SPEED_L + speed, MAX_SPEED_R - speed);
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	6a e9       	ldi	r22, 0x9A	; 154
 280:	79 e9       	ldi	r23, 0x99	; 153
 282:	89 e7       	ldi	r24, 0x79	; 121
 284:	9f e3       	ldi	r25, 0x3F	; 63
 286:	0e 94 80 04 	call	0x900	; 0x900 <__subsf3>
 28a:	4b 01       	movw	r8, r22
 28c:	5c 01       	movw	r10, r24
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e8       	ldi	r20, 0x80	; 128
 294:	5f e3       	ldi	r21, 0x3F	; 63
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	0e 94 81 04 	call	0x902	; 0x902 <__addsf3>
 29e:	a5 01       	movw	r20, r10
 2a0:	94 01       	movw	r18, r8
 2a2:	0e 94 93 01 	call	0x326	; 0x326 <Motor_SetDuty>
		dtostrf(last_error, 5, 2, temp);
		printf("%s | ", temp);
		dtostrf(error_i, 5, 2, temp);
		printf("%s\n", temp);
	#endif
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	bf 90       	pop	r11
 2b0:	af 90       	pop	r10
 2b2:	9f 90       	pop	r9
 2b4:	8f 90       	pop	r8
 2b6:	7f 90       	pop	r7
 2b8:	6f 90       	pop	r6
 2ba:	5f 90       	pop	r5
 2bc:	4f 90       	pop	r4
 2be:	08 95       	ret

000002c0 <GPIO_Init>:
	}
}

void GPIO_Init() {
	// D13 LED (PB5)
	DDRB |= (1 << DDB5);
 2c0:	25 9a       	sbi	0x04, 5	; 4
 2c2:	08 95       	ret

000002c4 <main>:

/* Function Definitions */
int main(void)
{
	/* Initialize Everything */
	sei();
 2c4:	78 94       	sei
	Timer_Init();
 2c6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Timer_Init>
	GPIO_Init();
 2ca:	0e 94 60 01 	call	0x2c0	; 0x2c0 <GPIO_Init>
	Motor_Init();
 2ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Motor_Init>
	uart_init();
 2d2:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_init>
	ADC_Init();
 2d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Init>
	/* Add Tasks */
	//Timer_Add(&PID_timer, PID_INTERVAL, PID_Loop);
	//Timer_Add(&print_timer, 1000, Sensors_Print);

	/* Misc */
	puts("\x1B[2J");				// Clear UART terminal (VTxxx control codes FTW)
 2da:	8e e0       	ldi	r24, 0x0E	; 14
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 8b 06 	call	0xd16	; 0xd16 <puts>
	Motor_SetMode(MOTOR_FORWARD);	// Start motors
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 2b 02 	call	0x456	; 0x456 <Motor_SetMode>

	/* Main Loop (Elegance is ...) */
    while (1) {
		Sensors_Read();		// Read sensors every loop. We want DATA.
 2e8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Sensors_Read>
		//Sensors_Print();
		PID_Loop();
 2ec:	0e 94 81 00 	call	0x102	; 0x102 <PID_Loop>
 2f0:	fb cf       	rjmp	.-10     	; 0x2e8 <main+0x24>

000002f2 <Motor_Init>:
	 
}

void Motor_SetDutyDelta(float leftDelta, float rightDelta) {
	Motor_SetDuty(motor_duty[0] + leftDelta, motor_duty[1] + rightDelta);
}
 2f2:	27 9a       	sbi	0x04, 7	; 4
 2f4:	8a b1       	in	r24, 0x0a	; 10
 2f6:	84 6f       	ori	r24, 0xF4	; 244
 2f8:	8a b9       	out	0x0a, r24	; 10
 2fa:	23 e0       	ldi	r18, 0x03	; 3
 2fc:	24 bd       	out	0x24, r18	; 36
 2fe:	8b e0       	ldi	r24, 0x0B	; 11
 300:	85 bd       	out	0x25, r24	; 37
 302:	99 ef       	ldi	r25, 0xF9	; 249
 304:	97 bd       	out	0x27, r25	; 39
 306:	18 bc       	out	0x28, r1	; 40
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 30e:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 312:	2c e0       	ldi	r18, 0x0C	; 12
 314:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 318:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 31c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 320:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 324:	08 95       	ret

00000326 <Motor_SetDuty>:
 326:	8f 92       	push	r8
 328:	9f 92       	push	r9
 32a:	af 92       	push	r10
 32c:	bf 92       	push	r11
 32e:	cf 92       	push	r12
 330:	df 92       	push	r13
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	4b 01       	movw	r8, r22
 338:	5c 01       	movw	r10, r24
 33a:	69 01       	movw	r12, r18
 33c:	7a 01       	movw	r14, r20
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e8       	ldi	r20, 0x80	; 128
 344:	5f e3       	ldi	r21, 0x3F	; 63
 346:	0e 94 d3 05 	call	0xba6	; 0xba6 <__gesf2>
 34a:	88 23       	and	r24, r24
 34c:	64 f0       	brlt	.+24     	; 0x366 <Motor_SetDuty+0x40>
 34e:	87 b5       	in	r24, 0x27	; 39
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	88 bd       	out	0x28, r24	; 40
 354:	0f 2e       	mov	r0, r31
 356:	81 2c       	mov	r8, r1
 358:	91 2c       	mov	r9, r1
 35a:	f0 e8       	ldi	r31, 0x80	; 128
 35c:	af 2e       	mov	r10, r31
 35e:	ff e3       	ldi	r31, 0x3F	; 63
 360:	bf 2e       	mov	r11, r31
 362:	f0 2d       	mov	r31, r0
 364:	25 c0       	rjmp	.+74     	; 0x3b0 <Motor_SetDuty+0x8a>
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	a9 01       	movw	r20, r18
 36c:	c5 01       	movw	r24, r10
 36e:	b4 01       	movw	r22, r8
 370:	0e 94 ed 04 	call	0x9da	; 0x9da <__cmpsf2>
 374:	18 16       	cp	r1, r24
 376:	2c f0       	brlt	.+10     	; 0x382 <Motor_SetDuty+0x5c>
 378:	18 bc       	out	0x28, r1	; 40
 37a:	81 2c       	mov	r8, r1
 37c:	91 2c       	mov	r9, r1
 37e:	54 01       	movw	r10, r8
 380:	17 c0       	rjmp	.+46     	; 0x3b0 <Motor_SetDuty+0x8a>
 382:	67 b5       	in	r22, 0x27	; 39
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	07 2e       	mov	r0, r23
 38c:	00 0c       	add	r0, r0
 38e:	88 0b       	sbc	r24, r24
 390:	99 0b       	sbc	r25, r25
 392:	0e 94 23 05 	call	0xa46	; 0xa46 <__floatsisf>
 396:	a5 01       	movw	r20, r10
 398:	94 01       	movw	r18, r8
 39a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	40 e8       	ldi	r20, 0x80	; 128
 3a4:	5f e3       	ldi	r21, 0x3F	; 63
 3a6:	0e 94 80 04 	call	0x900	; 0x900 <__subsf3>
 3aa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fixunssfsi>
 3ae:	68 bd       	out	0x28, r22	; 40
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e8       	ldi	r20, 0x80	; 128
 3b6:	5f e3       	ldi	r21, 0x3F	; 63
 3b8:	c7 01       	movw	r24, r14
 3ba:	b6 01       	movw	r22, r12
 3bc:	0e 94 d3 05 	call	0xba6	; 0xba6 <__gesf2>
 3c0:	88 23       	and	r24, r24
 3c2:	74 f0       	brlt	.+28     	; 0x3e0 <Motor_SetDuty+0xba>
 3c4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 3ce:	0f 2e       	mov	r0, r31
 3d0:	c1 2c       	mov	r12, r1
 3d2:	d1 2c       	mov	r13, r1
 3d4:	f0 e8       	ldi	r31, 0x80	; 128
 3d6:	ef 2e       	mov	r14, r31
 3d8:	ff e3       	ldi	r31, 0x3F	; 63
 3da:	ff 2e       	mov	r15, r31
 3dc:	f0 2d       	mov	r31, r0
 3de:	28 c0       	rjmp	.+80     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	a9 01       	movw	r20, r18
 3e6:	c7 01       	movw	r24, r14
 3e8:	b6 01       	movw	r22, r12
 3ea:	0e 94 ed 04 	call	0x9da	; 0x9da <__cmpsf2>
 3ee:	18 16       	cp	r1, r24
 3f0:	34 f0       	brlt	.+12     	; 0x3fe <Motor_SetDuty+0xd8>
 3f2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 3f6:	c1 2c       	mov	r12, r1
 3f8:	d1 2c       	mov	r13, r1
 3fa:	76 01       	movw	r14, r12
 3fc:	19 c0       	rjmp	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3fe:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	6f 5f       	subi	r22, 0xFF	; 255
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	07 2e       	mov	r0, r23
 40a:	00 0c       	add	r0, r0
 40c:	88 0b       	sbc	r24, r24
 40e:	99 0b       	sbc	r25, r25
 410:	0e 94 23 05 	call	0xa46	; 0xa46 <__floatsisf>
 414:	a7 01       	movw	r20, r14
 416:	96 01       	movw	r18, r12
 418:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e8       	ldi	r20, 0x80	; 128
 422:	5f e3       	ldi	r21, 0x3F	; 63
 424:	0e 94 80 04 	call	0x900	; 0x900 <__subsf3>
 428:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fixunssfsi>
 42c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 430:	e4 e2       	ldi	r30, 0x24	; 36
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	80 82       	st	Z, r8
 436:	91 82       	std	Z+1, r9	; 0x01
 438:	a2 82       	std	Z+2, r10	; 0x02
 43a:	b3 82       	std	Z+3, r11	; 0x03
 43c:	c4 82       	std	Z+4, r12	; 0x04
 43e:	d5 82       	std	Z+5, r13	; 0x05
 440:	e6 82       	std	Z+6, r14	; 0x06
 442:	f7 82       	std	Z+7, r15	; 0x07
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	bf 90       	pop	r11
 44e:	af 90       	pop	r10
 450:	9f 90       	pop	r9
 452:	8f 90       	pop	r8
 454:	08 95       	ret

00000456 <Motor_SetMode>:

void Motor_SetMode(MOTOR_STATE mode) {
	switch (mode) {
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	21 f0       	breq	.+8      	; 0x462 <Motor_SetMode+0xc>
 45a:	68 f0       	brcs	.+26     	; 0x476 <Motor_SetMode+0x20>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	31 f0       	breq	.+12     	; 0x46c <Motor_SetMode+0x16>
 460:	08 95       	ret
		case MOTOR_FORWARD:
			/* Left */
			PORTD &= ~(L_CTRL_1);
 462:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= L_CTRL_2;
 464:	5c 9a       	sbi	0x0b, 4	; 11
			/* Right */
			PORTB |= R_CTRL_2;
 466:	28 9a       	sbi	0x05, 0	; 5
			PORTD &= ~(R_CTRL_1);
 468:	5f 98       	cbi	0x0b, 7	; 11
			break;
 46a:	08 95       	ret
			
		case MOTOR_REVERSE:
			/* Left */
			PORTD |= L_CTRL_1;
 46c:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(L_CTRL_2);
 46e:	5c 98       	cbi	0x0b, 4	; 11
			/* Right */
			PORTD |= R_CTRL_1;
 470:	5f 9a       	sbi	0x0b, 7	; 11
			PORTB &= ~(R_CTRL_2);
 472:	28 98       	cbi	0x05, 0	; 5
			break;
 474:	08 95       	ret
			
		case MOTOR_STOP:
			PORTD &= ~(L_CTRL_1 | L_CTRL_2 | R_CTRL_1);
 476:	8b b1       	in	r24, 0x0b	; 11
 478:	8b 76       	andi	r24, 0x6B	; 107
 47a:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(R_CTRL_2);
 47c:	28 98       	cbi	0x05, 0	; 5
 47e:	08 95       	ret

00000480 <__vector_14>:
			break;
	}
	state = mode;
}

ISR (TIMER0_COMPA_vect) {
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
	PORTD |= PWML;
 48a:	5d 9a       	sbi	0x0b, 5	; 11
}
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_15>:

ISR (TIMER0_COMPB_vect) {
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
	PORTD &= ~PWML;
 4a0:	5d 98       	cbi	0x0b, 5	; 11
}
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <__vector_7>:

ISR (TIMER2_COMPA_vect) {
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
	PORTD |= PWMR;
 4b6:	5e 9a       	sbi	0x0b, 6	; 11
}
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_8>:

ISR (TIMER2_COMPB_vect) {
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
	PORTD &= ~PWMR;
 4cc:	5e 98       	cbi	0x0b, 6	; 11
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <Sensors_Read>:
/* Global Variables */
SENSOR_DATA _sensors_current = {0};
SENSOR_DATA _sensors_last = {0};

/* Function Definitions */
void Sensors_Read() {
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
	// ADC0 - Left
	// ADC1 - Mid
	// ADC2 - Right
	ADC_SetChannel(ADC0);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_SetChannel>
	_sensors_current.voltages[0] = ADC_ReadVoltage();
 4ea:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_ReadVoltage>
 4ee:	c9 e3       	ldi	r28, 0x39	; 57
 4f0:	d1 e0       	ldi	r29, 0x01	; 1
 4f2:	68 83       	st	Y, r22
 4f4:	79 83       	std	Y+1, r23	; 0x01
 4f6:	8a 83       	std	Y+2, r24	; 0x02
 4f8:	9b 83       	std	Y+3, r25	; 0x03
	ADC_SetChannel(ADC1);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_SetChannel>
	_sensors_current.voltages[1] = ADC_ReadVoltage();
 500:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_ReadVoltage>
 504:	6c 83       	std	Y+4, r22	; 0x04
 506:	7d 83       	std	Y+5, r23	; 0x05
 508:	8e 83       	std	Y+6, r24	; 0x06
 50a:	9f 83       	std	Y+7, r25	; 0x07
	ADC_SetChannel(ADC2);
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_SetChannel>
	_sensors_current.voltages[2] = ADC_ReadVoltage();
 512:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_ReadVoltage>
 516:	6b 01       	movw	r12, r22
 518:	7c 01       	movw	r14, r24
 51a:	68 87       	std	Y+8, r22	; 0x08
 51c:	79 87       	std	Y+9, r23	; 0x09
 51e:	8a 87       	std	Y+10, r24	; 0x0a
 520:	9b 87       	std	Y+11, r25	; 0x0b
	
	_sensors_last = _sensors_current;
 522:	8d e0       	ldi	r24, 0x0D	; 13
 524:	fe 01       	movw	r30, r28
 526:	ac e2       	ldi	r26, 0x2C	; 44
 528:	b1 e0       	ldi	r27, 0x01	; 1
 52a:	01 90       	ld	r0, Z+
 52c:	0d 92       	st	X+, r0
 52e:	8a 95       	dec	r24
 530:	e1 f7       	brne	.-8      	; 0x52a <Sensors_Read+0x52>
	
	if (_sensors_current.voltages[0] >= VOLTAGE_THRESHOLD)
 532:	26 e6       	ldi	r18, 0x66	; 102
 534:	36 e6       	ldi	r19, 0x66	; 102
 536:	46 e9       	ldi	r20, 0x96	; 150
 538:	50 e4       	ldi	r21, 0x40	; 64
 53a:	68 81       	ld	r22, Y
 53c:	79 81       	ldd	r23, Y+1	; 0x01
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	9b 81       	ldd	r25, Y+3	; 0x03
 542:	0e 94 d3 05 	call	0xba6	; 0xba6 <__gesf2>
 546:	88 23       	and	r24, r24
 548:	34 f0       	brlt	.+12     	; 0x556 <Sensors_Read+0x7e>
		_sensors_current.left = 1;
 54a:	e5 e4       	ldi	r30, 0x45	; 69
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	80 81       	ld	r24, Z
 550:	84 60       	ori	r24, 0x04	; 4
 552:	80 83       	st	Z, r24
 554:	05 c0       	rjmp	.+10     	; 0x560 <Sensors_Read+0x88>
	else
		_sensors_current.left = 0;
 556:	e5 e4       	ldi	r30, 0x45	; 69
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	80 81       	ld	r24, Z
 55c:	8b 7f       	andi	r24, 0xFB	; 251
 55e:	80 83       	st	Z, r24
		
	if (_sensors_current.voltages[1] >= VOLTAGE_THRESHOLD)
 560:	26 e6       	ldi	r18, 0x66	; 102
 562:	36 e6       	ldi	r19, 0x66	; 102
 564:	46 e9       	ldi	r20, 0x96	; 150
 566:	50 e4       	ldi	r21, 0x40	; 64
 568:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <_sensors_current+0x4>
 56c:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <_sensors_current+0x5>
 570:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_sensors_current+0x6>
 574:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_sensors_current+0x7>
 578:	0e 94 d3 05 	call	0xba6	; 0xba6 <__gesf2>
 57c:	88 23       	and	r24, r24
 57e:	34 f0       	brlt	.+12     	; 0x58c <Sensors_Read+0xb4>
		_sensors_current.mid = 1;
 580:	e5 e4       	ldi	r30, 0x45	; 69
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	80 81       	ld	r24, Z
 586:	82 60       	ori	r24, 0x02	; 2
 588:	80 83       	st	Z, r24
 58a:	05 c0       	rjmp	.+10     	; 0x596 <Sensors_Read+0xbe>
	else
		_sensors_current.mid = 0;
 58c:	e5 e4       	ldi	r30, 0x45	; 69
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	80 81       	ld	r24, Z
 592:	8d 7f       	andi	r24, 0xFD	; 253
 594:	80 83       	st	Z, r24
	
	if (_sensors_current.voltages[2] >= VOLTAGE_THRESHOLD)
 596:	26 e6       	ldi	r18, 0x66	; 102
 598:	36 e6       	ldi	r19, 0x66	; 102
 59a:	46 e9       	ldi	r20, 0x96	; 150
 59c:	50 e4       	ldi	r21, 0x40	; 64
 59e:	c7 01       	movw	r24, r14
 5a0:	b6 01       	movw	r22, r12
 5a2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__gesf2>
 5a6:	88 23       	and	r24, r24
 5a8:	34 f0       	brlt	.+12     	; 0x5b6 <Sensors_Read+0xde>
		_sensors_current.right = 1;
 5aa:	e5 e4       	ldi	r30, 0x45	; 69
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
 5ae:	80 81       	ld	r24, Z
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	80 83       	st	Z, r24
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <Sensors_Read+0xe8>
	else
		_sensors_current.right = 0;
 5b6:	e5 e4       	ldi	r30, 0x45	; 69
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	80 81       	ld	r24, Z
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 83       	st	Z, r24
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	08 95       	ret

000005ce <Timer_Init>:
		}
		
		/* Process next timer */
		timer = timer->next;
	}
}
 5ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 5d2:	8b e0       	ldi	r24, 0x0B	; 11
 5d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5d8:	89 ef       	ldi	r24, 0xF9	; 249
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 5ea:	08 95       	ret

000005ec <__vector_11>:

ISR (TIMER1_COMPA_vect) {
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	2f 93       	push	r18
 5f8:	3f 93       	push	r19
 5fa:	4f 93       	push	r20
 5fc:	5f 93       	push	r21
 5fe:	6f 93       	push	r22
 600:	7f 93       	push	r23
 602:	8f 93       	push	r24
 604:	9f 93       	push	r25
 606:	af 93       	push	r26
	ticks++;
 608:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <ticks>
 60c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <ticks+0x1>
 610:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <ticks+0x2>
 614:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <ticks+0x3>
 618:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <ticks+0x4>
 61c:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <ticks+0x5>
 620:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ticks+0x6>
 624:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <ticks+0x7>
 628:	a1 e0       	ldi	r26, 0x01	; 1
 62a:	0e 94 4b 06 	call	0xc96	; 0xc96 <__adddi3_s8>
 62e:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <ticks>
 632:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <ticks+0x1>
 636:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <ticks+0x2>
 63a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <ticks+0x3>
 63e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <ticks+0x4>
 642:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <ticks+0x5>
 646:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <ticks+0x6>
 64a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <ticks+0x7>
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	7f 91       	pop	r23
 656:	6f 91       	pop	r22
 658:	5f 91       	pop	r21
 65a:	4f 91       	pop	r20
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 66a:	cf 93       	push	r28
 66c:	c8 2f       	mov	r28, r24

  if (c == '\a')
 66e:	87 30       	cpi	r24, 0x07	; 7
 670:	69 f4       	brne	.+26     	; 0x68c <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 672:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <__iob+0x4>
 676:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <__iob+0x5>
 67a:	47 e0       	ldi	r20, 0x07	; 7
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	83 e1       	ldi	r24, 0x13	; 19
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	0e 94 57 06 	call	0xcae	; 0xcae <fwrite>
      return 0;
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <uart_putchar+0x3a>
    }

  if (c == '\n')
 68c:	8a 30       	cpi	r24, 0x0A	; 10
 68e:	19 f4       	brne	.+6      	; 0x696 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 690:	8d e0       	ldi	r24, 0x0D	; 13
 692:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 696:	e0 ec       	ldi	r30, 0xC0	; 192
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	85 ff       	sbrs	r24, 5
 69e:	fd cf       	rjmp	.-6      	; 0x69a <uart_putchar+0x30>
  UDR0 = c;
 6a0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 6ac:	6f 92       	push	r6
 6ae:	7f 92       	push	r7
 6b0:	8f 92       	push	r8
 6b2:	9f 92       	push	r9
 6b4:	af 92       	push	r10
 6b6:	bf 92       	push	r11
 6b8:	cf 92       	push	r12
 6ba:	df 92       	push	r13
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 6c8:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <rxp.1828>
 6cc:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <rxp.1828+0x1>
 6d0:	23 2b       	or	r18, r19
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <uart_getchar+0x2a>
 6d4:	da c0       	rjmp	.+436    	; 0x88a <uart_getchar+0x1de>
 6d6:	8c 01       	movw	r16, r24
 6d8:	0f 2e       	mov	r0, r31
 6da:	fe e4       	ldi	r31, 0x4E	; 78
 6dc:	8f 2e       	mov	r8, r31
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	9f 2e       	mov	r9, r31
 6e2:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 6e4:	c0 ec       	ldi	r28, 0xC0	; 192
 6e6:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 6e8:	0f 2e       	mov	r0, r31
 6ea:	f6 ec       	ldi	r31, 0xC6	; 198
 6ec:	cf 2e       	mov	r12, r31
 6ee:	d1 2c       	mov	r13, r1
 6f0:	f0 2d       	mov	r31, r0
 6f2:	54 01       	movw	r10, r8
 6f4:	0f 2e       	mov	r0, r31
 6f6:	fd e4       	ldi	r31, 0x4D	; 77
 6f8:	6f 2e       	mov	r6, r31
 6fa:	f1 e0       	ldi	r31, 0x01	; 1
 6fc:	7f 2e       	mov	r7, r31
 6fe:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 700:	88 81       	ld	r24, Y
 702:	88 23       	and	r24, r24
 704:	ec f7       	brge	.-6      	; 0x700 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 706:	88 81       	ld	r24, Y
 708:	84 fd       	sbrc	r24, 4
 70a:	d2 c0       	rjmp	.+420    	; 0x8b0 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 70c:	88 81       	ld	r24, Y
 70e:	83 fd       	sbrc	r24, 3
 710:	d2 c0       	rjmp	.+420    	; 0x8b6 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
 712:	f6 01       	movw	r30, r12
 714:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 716:	8d 30       	cpi	r24, 0x0D	; 13
 718:	11 f0       	breq	.+4      	; 0x71e <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 71a:	8a 30       	cpi	r24, 0x0A	; 10
 71c:	69 f4       	brne	.+26     	; 0x738 <uart_getchar+0x8c>
	  {
	    *cp = c;
 71e:	8a e0       	ldi	r24, 0x0A	; 10
 720:	f4 01       	movw	r30, r8
 722:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 724:	b8 01       	movw	r22, r16
 726:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
	    rxp = b;
 72a:	8e e4       	ldi	r24, 0x4E	; 78
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <rxp.1828+0x1>
 732:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rxp.1828>
	    break;
 736:	a9 c0       	rjmp	.+338    	; 0x88a <uart_getchar+0x1de>
	  }
	else if (c == '\t')
 738:	89 30       	cpi	r24, 0x09	; 9
 73a:	39 f0       	breq	.+14     	; 0x74a <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 73c:	90 ee       	ldi	r25, 0xE0	; 224
 73e:	98 0f       	add	r25, r24
 740:	9f 35       	cpi	r25, 0x5F	; 95
 742:	20 f0       	brcs	.+8      	; 0x74c <uart_getchar+0xa0>
 744:	80 3a       	cpi	r24, 0xA0	; 160
 746:	b8 f0       	brcs	.+46     	; 0x776 <uart_getchar+0xca>
 748:	01 c0       	rjmp	.+2      	; 0x74c <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 74a:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 74c:	fd e9       	ldi	r31, 0x9D	; 157
 74e:	8f 16       	cp	r8, r31
 750:	f1 e0       	ldi	r31, 0x01	; 1
 752:	9f 06       	cpc	r9, r31
 754:	29 f4       	brne	.+10     	; 0x760 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 756:	b8 01       	movw	r22, r16
 758:	87 e0       	ldi	r24, 0x07	; 7
 75a:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
 75e:	d0 cf       	rjmp	.-96     	; 0x700 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 760:	74 01       	movw	r14, r8
 762:	9f ef       	ldi	r25, 0xFF	; 255
 764:	e9 1a       	sub	r14, r25
 766:	f9 0a       	sbc	r15, r25
 768:	f4 01       	movw	r30, r8
 76a:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 76c:	b8 01       	movw	r22, r16
 76e:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 772:	47 01       	movw	r8, r14
 774:	c5 cf       	rjmp	.-118    	; 0x700 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 776:	82 31       	cpi	r24, 0x12	; 18
 778:	d1 f1       	breq	.+116    	; 0x7ee <uart_getchar+0x142>
 77a:	30 f4       	brcc	.+12     	; 0x788 <uart_getchar+0xdc>
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	09 f4       	brne	.+2      	; 0x782 <uart_getchar+0xd6>
 780:	9d c0       	rjmp	.+314    	; 0x8bc <uart_getchar+0x210>
 782:	88 30       	cpi	r24, 0x08	; 8
 784:	e9 f0       	breq	.+58     	; 0x7c0 <uart_getchar+0x114>
 786:	bc cf       	rjmp	.-136    	; 0x700 <uart_getchar+0x54>
 788:	87 31       	cpi	r24, 0x17	; 23
 78a:	29 f0       	breq	.+10     	; 0x796 <uart_getchar+0xea>
 78c:	8f 37       	cpi	r24, 0x7F	; 127
 78e:	c1 f0       	breq	.+48     	; 0x7c0 <uart_getchar+0x114>
 790:	85 31       	cpi	r24, 0x15	; 21
 792:	79 f0       	breq	.+30     	; 0x7b2 <uart_getchar+0x106>
 794:	b5 cf       	rjmp	.-150    	; 0x700 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 796:	fe e4       	ldi	r31, 0x4E	; 78
 798:	8f 16       	cp	r8, r31
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	9f 06       	cpc	r9, r31
 79e:	09 f0       	breq	.+2      	; 0x7a2 <uart_getchar+0xf6>
 7a0:	08 f4       	brcc	.+2      	; 0x7a4 <uart_getchar+0xf8>
 7a2:	ae cf       	rjmp	.-164    	; 0x700 <uart_getchar+0x54>
 7a4:	f4 01       	movw	r30, r8
 7a6:	31 97       	sbiw	r30, 0x01	; 1
 7a8:	80 81       	ld	r24, Z
 7aa:	80 32       	cpi	r24, 0x20	; 32
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <uart_getchar+0x104>
 7ae:	52 c0       	rjmp	.+164    	; 0x854 <uart_getchar+0x1a8>
 7b0:	a7 cf       	rjmp	.-178    	; 0x700 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 7b2:	8e e4       	ldi	r24, 0x4E	; 78
 7b4:	88 16       	cp	r8, r24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	98 06       	cpc	r9, r24
 7ba:	09 f0       	breq	.+2      	; 0x7be <uart_getchar+0x112>
 7bc:	98 f5       	brcc	.+102    	; 0x824 <uart_getchar+0x178>
 7be:	a0 cf       	rjmp	.-192    	; 0x700 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 7c0:	9e e4       	ldi	r25, 0x4E	; 78
 7c2:	89 16       	cp	r8, r25
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	99 06       	cpc	r9, r25
 7c8:	09 f0       	breq	.+2      	; 0x7cc <uart_getchar+0x120>
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <uart_getchar+0x122>
 7cc:	99 cf       	rjmp	.-206    	; 0x700 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 7ce:	b8 01       	movw	r22, r16
 7d0:	88 e0       	ldi	r24, 0x08	; 8
 7d2:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		uart_putchar(' ', stream);
 7d6:	b8 01       	movw	r22, r16
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		uart_putchar('\b', stream);
 7de:	b8 01       	movw	r22, r16
 7e0:	88 e0       	ldi	r24, 0x08	; 8
 7e2:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		cp--;
 7e6:	e1 e0       	ldi	r30, 0x01	; 1
 7e8:	8e 1a       	sub	r8, r30
 7ea:	91 08       	sbc	r9, r1
 7ec:	89 cf       	rjmp	.-238    	; 0x700 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 7ee:	b8 01       	movw	r22, r16
 7f0:	8d e0       	ldi	r24, 0x0D	; 13
 7f2:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 7f6:	fe e4       	ldi	r31, 0x4E	; 78
 7f8:	8f 16       	cp	r8, r31
 7fa:	f1 e0       	ldi	r31, 0x01	; 1
 7fc:	9f 06       	cpc	r9, r31
 7fe:	09 f0       	breq	.+2      	; 0x802 <uart_getchar+0x156>
 800:	08 f4       	brcc	.+2      	; 0x804 <uart_getchar+0x158>
 802:	7e cf       	rjmp	.-260    	; 0x700 <uart_getchar+0x54>
 804:	0f 2e       	mov	r0, r31
 806:	fe e4       	ldi	r31, 0x4E	; 78
 808:	ef 2e       	mov	r14, r31
 80a:	f1 e0       	ldi	r31, 0x01	; 1
 80c:	ff 2e       	mov	r15, r31
 80e:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 810:	b8 01       	movw	r22, r16
 812:	f7 01       	movw	r30, r14
 814:	81 91       	ld	r24, Z+
 816:	7f 01       	movw	r14, r30
 818:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 81c:	8e 14       	cp	r8, r14
 81e:	9f 04       	cpc	r9, r15
 820:	b9 f7       	brne	.-18     	; 0x810 <uart_getchar+0x164>
 822:	6e cf       	rjmp	.-292    	; 0x700 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 824:	b8 01       	movw	r22, r16
 826:	88 e0       	ldi	r24, 0x08	; 8
 828:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		uart_putchar(' ', stream);
 82c:	b8 01       	movw	r22, r16
 82e:	80 e2       	ldi	r24, 0x20	; 32
 830:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		uart_putchar('\b', stream);
 834:	b8 01       	movw	r22, r16
 836:	88 e0       	ldi	r24, 0x08	; 8
 838:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		cp--;
 83c:	f1 e0       	ldi	r31, 0x01	; 1
 83e:	8f 1a       	sub	r8, r31
 840:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 842:	8e e4       	ldi	r24, 0x4E	; 78
 844:	88 16       	cp	r8, r24
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	98 06       	cpc	r9, r24
 84a:	61 f7       	brne	.-40     	; 0x824 <uart_getchar+0x178>
 84c:	f3 01       	movw	r30, r6
 84e:	31 96       	adiw	r30, 0x01	; 1
 850:	4f 01       	movw	r8, r30
 852:	56 cf       	rjmp	.-340    	; 0x700 <uart_getchar+0x54>
 854:	74 01       	movw	r14, r8
 856:	f1 e0       	ldi	r31, 0x01	; 1
 858:	ef 1a       	sub	r14, r31
 85a:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 85c:	b8 01       	movw	r22, r16
 85e:	88 e0       	ldi	r24, 0x08	; 8
 860:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		uart_putchar(' ', stream);
 864:	b8 01       	movw	r22, r16
 866:	80 e2       	ldi	r24, 0x20	; 32
 868:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		uart_putchar('\b', stream);
 86c:	b8 01       	movw	r22, r16
 86e:	88 e0       	ldi	r24, 0x08	; 8
 870:	0e 94 35 03 	call	0x66a	; 0x66a <uart_putchar>
		cp--;
 874:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 876:	ea 14       	cp	r14, r10
 878:	fb 04       	cpc	r15, r11
 87a:	09 f4       	brne	.+2      	; 0x87e <uart_getchar+0x1d2>
 87c:	41 cf       	rjmp	.-382    	; 0x700 <uart_getchar+0x54>
 87e:	f7 01       	movw	r30, r14
 880:	82 91       	ld	r24, -Z
 882:	7f 01       	movw	r14, r30
 884:	80 32       	cpi	r24, 0x20	; 32
 886:	51 f7       	brne	.-44     	; 0x85c <uart_getchar+0x1b0>
 888:	3b cf       	rjmp	.-394    	; 0x700 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 88a:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <rxp.1828>
 88e:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <rxp.1828+0x1>
 892:	cf 01       	movw	r24, r30
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <rxp.1828+0x1>
 89a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rxp.1828>
 89e:	80 81       	ld	r24, Z
  if (c == '\n')
 8a0:	8a 30       	cpi	r24, 0x0A	; 10
 8a2:	21 f4       	brne	.+8      	; 0x8ac <uart_getchar+0x200>
    rxp = 0;
 8a4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <rxp.1828+0x1>
 8a8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <rxp.1828>

  return c;
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 8b0:	8e ef       	ldi	r24, 0xFE	; 254
 8b2:	9f ef       	ldi	r25, 0xFF	; 255
 8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 8b6:	8f ef       	ldi	r24, 0xFF	; 255
 8b8:	9f ef       	ldi	r25, 0xFF	; 255
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	ff 90       	pop	r15
 8ca:	ef 90       	pop	r14
 8cc:	df 90       	pop	r13
 8ce:	cf 90       	pop	r12
 8d0:	bf 90       	pop	r11
 8d2:	af 90       	pop	r10
 8d4:	9f 90       	pop	r9
 8d6:	8f 90       	pop	r8
 8d8:	7f 90       	pop	r7
 8da:	6f 90       	pop	r6
 8dc:	08 95       	ret

000008de <uart_init>:
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
void
uart_init(void)
{
	stdin = stdout = stderr = &uart_stream;
 8de:	e0 ea       	ldi	r30, 0xA0	; 160
 8e0:	f1 e0       	ldi	r31, 0x01	; 1
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	95 83       	std	Z+5, r25	; 0x05
 8e8:	84 83       	std	Z+4, r24	; 0x04
 8ea:	93 83       	std	Z+3, r25	; 0x03
 8ec:	82 83       	std	Z+2, r24	; 0x02
 8ee:	91 83       	std	Z+1, r25	; 0x01
 8f0:	80 83       	st	Z, r24
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 8f2:	83 e3       	ldi	r24, 0x33	; 51
 8f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 8f8:	88 e1       	ldi	r24, 0x18	; 24
 8fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 8fe:	08 95       	ret

00000900 <__subsf3>:
 900:	50 58       	subi	r21, 0x80	; 128

00000902 <__addsf3>:
 902:	bb 27       	eor	r27, r27
 904:	aa 27       	eor	r26, r26
 906:	0e 94 98 04 	call	0x930	; 0x930 <__addsf3x>
 90a:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_round>
 90e:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscA>
 912:	38 f0       	brcs	.+14     	; 0x922 <__addsf3+0x20>
 914:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_pscB>
 918:	20 f0       	brcs	.+8      	; 0x922 <__addsf3+0x20>
 91a:	39 f4       	brne	.+14     	; 0x92a <__addsf3+0x28>
 91c:	9f 3f       	cpi	r25, 0xFF	; 255
 91e:	19 f4       	brne	.+6      	; 0x926 <__addsf3+0x24>
 920:	26 f4       	brtc	.+8      	; 0x92a <__addsf3+0x28>
 922:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_nan>
 926:	0e f4       	brtc	.+2      	; 0x92a <__addsf3+0x28>
 928:	e0 95       	com	r30
 92a:	e7 fb       	bst	r30, 7
 92c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>

00000930 <__addsf3x>:
 930:	e9 2f       	mov	r30, r25
 932:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_split3>
 936:	58 f3       	brcs	.-42     	; 0x90e <__addsf3+0xc>
 938:	ba 17       	cp	r27, r26
 93a:	62 07       	cpc	r22, r18
 93c:	73 07       	cpc	r23, r19
 93e:	84 07       	cpc	r24, r20
 940:	95 07       	cpc	r25, r21
 942:	20 f0       	brcs	.+8      	; 0x94c <__addsf3x+0x1c>
 944:	79 f4       	brne	.+30     	; 0x964 <__addsf3x+0x34>
 946:	a6 f5       	brtc	.+104    	; 0x9b0 <__addsf3x+0x80>
 948:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_zero>
 94c:	0e f4       	brtc	.+2      	; 0x950 <__addsf3x+0x20>
 94e:	e0 95       	com	r30
 950:	0b 2e       	mov	r0, r27
 952:	ba 2f       	mov	r27, r26
 954:	a0 2d       	mov	r26, r0
 956:	0b 01       	movw	r0, r22
 958:	b9 01       	movw	r22, r18
 95a:	90 01       	movw	r18, r0
 95c:	0c 01       	movw	r0, r24
 95e:	ca 01       	movw	r24, r20
 960:	a0 01       	movw	r20, r0
 962:	11 24       	eor	r1, r1
 964:	ff 27       	eor	r31, r31
 966:	59 1b       	sub	r21, r25
 968:	99 f0       	breq	.+38     	; 0x990 <__addsf3x+0x60>
 96a:	59 3f       	cpi	r21, 0xF9	; 249
 96c:	50 f4       	brcc	.+20     	; 0x982 <__addsf3x+0x52>
 96e:	50 3e       	cpi	r21, 0xE0	; 224
 970:	68 f1       	brcs	.+90     	; 0x9cc <__addsf3x+0x9c>
 972:	1a 16       	cp	r1, r26
 974:	f0 40       	sbci	r31, 0x00	; 0
 976:	a2 2f       	mov	r26, r18
 978:	23 2f       	mov	r18, r19
 97a:	34 2f       	mov	r19, r20
 97c:	44 27       	eor	r20, r20
 97e:	58 5f       	subi	r21, 0xF8	; 248
 980:	f3 cf       	rjmp	.-26     	; 0x968 <__addsf3x+0x38>
 982:	46 95       	lsr	r20
 984:	37 95       	ror	r19
 986:	27 95       	ror	r18
 988:	a7 95       	ror	r26
 98a:	f0 40       	sbci	r31, 0x00	; 0
 98c:	53 95       	inc	r21
 98e:	c9 f7       	brne	.-14     	; 0x982 <__addsf3x+0x52>
 990:	7e f4       	brtc	.+30     	; 0x9b0 <__addsf3x+0x80>
 992:	1f 16       	cp	r1, r31
 994:	ba 0b       	sbc	r27, r26
 996:	62 0b       	sbc	r22, r18
 998:	73 0b       	sbc	r23, r19
 99a:	84 0b       	sbc	r24, r20
 99c:	ba f0       	brmi	.+46     	; 0x9cc <__addsf3x+0x9c>
 99e:	91 50       	subi	r25, 0x01	; 1
 9a0:	a1 f0       	breq	.+40     	; 0x9ca <__addsf3x+0x9a>
 9a2:	ff 0f       	add	r31, r31
 9a4:	bb 1f       	adc	r27, r27
 9a6:	66 1f       	adc	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	c2 f7       	brpl	.-16     	; 0x99e <__addsf3x+0x6e>
 9ae:	0e c0       	rjmp	.+28     	; 0x9cc <__addsf3x+0x9c>
 9b0:	ba 0f       	add	r27, r26
 9b2:	62 1f       	adc	r22, r18
 9b4:	73 1f       	adc	r23, r19
 9b6:	84 1f       	adc	r24, r20
 9b8:	48 f4       	brcc	.+18     	; 0x9cc <__addsf3x+0x9c>
 9ba:	87 95       	ror	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f7 95       	ror	r31
 9c4:	9e 3f       	cpi	r25, 0xFE	; 254
 9c6:	08 f0       	brcs	.+2      	; 0x9ca <__addsf3x+0x9a>
 9c8:	b0 cf       	rjmp	.-160    	; 0x92a <__addsf3+0x28>
 9ca:	93 95       	inc	r25
 9cc:	88 0f       	add	r24, r24
 9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__addsf3x+0xa2>
 9d0:	99 27       	eor	r25, r25
 9d2:	ee 0f       	add	r30, r30
 9d4:	97 95       	ror	r25
 9d6:	87 95       	ror	r24
 9d8:	08 95       	ret

000009da <__cmpsf2>:
 9da:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_cmp>
 9de:	08 f4       	brcc	.+2      	; 0x9e2 <__cmpsf2+0x8>
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	08 95       	ret

000009e4 <__fixunssfsi>:
 9e4:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_splitA>
 9e8:	88 f0       	brcs	.+34     	; 0xa0c <__fixunssfsi+0x28>
 9ea:	9f 57       	subi	r25, 0x7F	; 127
 9ec:	98 f0       	brcs	.+38     	; 0xa14 <__fixunssfsi+0x30>
 9ee:	b9 2f       	mov	r27, r25
 9f0:	99 27       	eor	r25, r25
 9f2:	b7 51       	subi	r27, 0x17	; 23
 9f4:	b0 f0       	brcs	.+44     	; 0xa22 <__fixunssfsi+0x3e>
 9f6:	e1 f0       	breq	.+56     	; 0xa30 <__fixunssfsi+0x4c>
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	1a f0       	brmi	.+6      	; 0xa08 <__fixunssfsi+0x24>
 a02:	ba 95       	dec	r27
 a04:	c9 f7       	brne	.-14     	; 0x9f8 <__fixunssfsi+0x14>
 a06:	14 c0       	rjmp	.+40     	; 0xa30 <__fixunssfsi+0x4c>
 a08:	b1 30       	cpi	r27, 0x01	; 1
 a0a:	91 f0       	breq	.+36     	; 0xa30 <__fixunssfsi+0x4c>
 a0c:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_zero>
 a10:	b1 e0       	ldi	r27, 0x01	; 1
 a12:	08 95       	ret
 a14:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_zero>
 a18:	67 2f       	mov	r22, r23
 a1a:	78 2f       	mov	r23, r24
 a1c:	88 27       	eor	r24, r24
 a1e:	b8 5f       	subi	r27, 0xF8	; 248
 a20:	39 f0       	breq	.+14     	; 0xa30 <__fixunssfsi+0x4c>
 a22:	b9 3f       	cpi	r27, 0xF9	; 249
 a24:	cc f3       	brlt	.-14     	; 0xa18 <__fixunssfsi+0x34>
 a26:	86 95       	lsr	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b3 95       	inc	r27
 a2e:	d9 f7       	brne	.-10     	; 0xa26 <__fixunssfsi+0x42>
 a30:	3e f4       	brtc	.+14     	; 0xa40 <__fixunssfsi+0x5c>
 a32:	90 95       	com	r25
 a34:	80 95       	com	r24
 a36:	70 95       	com	r23
 a38:	61 95       	neg	r22
 a3a:	7f 4f       	sbci	r23, 0xFF	; 255
 a3c:	8f 4f       	sbci	r24, 0xFF	; 255
 a3e:	9f 4f       	sbci	r25, 0xFF	; 255
 a40:	08 95       	ret

00000a42 <__floatunsisf>:
 a42:	e8 94       	clt
 a44:	09 c0       	rjmp	.+18     	; 0xa58 <__floatsisf+0x12>

00000a46 <__floatsisf>:
 a46:	97 fb       	bst	r25, 7
 a48:	3e f4       	brtc	.+14     	; 0xa58 <__floatsisf+0x12>
 a4a:	90 95       	com	r25
 a4c:	80 95       	com	r24
 a4e:	70 95       	com	r23
 a50:	61 95       	neg	r22
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	99 23       	and	r25, r25
 a5a:	a9 f0       	breq	.+42     	; 0xa86 <__floatsisf+0x40>
 a5c:	f9 2f       	mov	r31, r25
 a5e:	96 e9       	ldi	r25, 0x96	; 150
 a60:	bb 27       	eor	r27, r27
 a62:	93 95       	inc	r25
 a64:	f6 95       	lsr	r31
 a66:	87 95       	ror	r24
 a68:	77 95       	ror	r23
 a6a:	67 95       	ror	r22
 a6c:	b7 95       	ror	r27
 a6e:	f1 11       	cpse	r31, r1
 a70:	f8 cf       	rjmp	.-16     	; 0xa62 <__floatsisf+0x1c>
 a72:	fa f4       	brpl	.+62     	; 0xab2 <__floatsisf+0x6c>
 a74:	bb 0f       	add	r27, r27
 a76:	11 f4       	brne	.+4      	; 0xa7c <__floatsisf+0x36>
 a78:	60 ff       	sbrs	r22, 0
 a7a:	1b c0       	rjmp	.+54     	; 0xab2 <__floatsisf+0x6c>
 a7c:	6f 5f       	subi	r22, 0xFF	; 255
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	16 c0       	rjmp	.+44     	; 0xab2 <__floatsisf+0x6c>
 a86:	88 23       	and	r24, r24
 a88:	11 f0       	breq	.+4      	; 0xa8e <__floatsisf+0x48>
 a8a:	96 e9       	ldi	r25, 0x96	; 150
 a8c:	11 c0       	rjmp	.+34     	; 0xab0 <__floatsisf+0x6a>
 a8e:	77 23       	and	r23, r23
 a90:	21 f0       	breq	.+8      	; 0xa9a <__floatsisf+0x54>
 a92:	9e e8       	ldi	r25, 0x8E	; 142
 a94:	87 2f       	mov	r24, r23
 a96:	76 2f       	mov	r23, r22
 a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__floatsisf+0x5e>
 a9a:	66 23       	and	r22, r22
 a9c:	71 f0       	breq	.+28     	; 0xaba <__floatsisf+0x74>
 a9e:	96 e8       	ldi	r25, 0x86	; 134
 aa0:	86 2f       	mov	r24, r22
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	2a f0       	brmi	.+10     	; 0xab2 <__floatsisf+0x6c>
 aa8:	9a 95       	dec	r25
 aaa:	66 0f       	add	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	da f7       	brpl	.-10     	; 0xaa8 <__floatsisf+0x62>
 ab2:	88 0f       	add	r24, r24
 ab4:	96 95       	lsr	r25
 ab6:	87 95       	ror	r24
 ab8:	97 f9       	bld	r25, 7
 aba:	08 95       	ret

00000abc <__fp_cmp>:
 abc:	99 0f       	add	r25, r25
 abe:	00 08       	sbc	r0, r0
 ac0:	55 0f       	add	r21, r21
 ac2:	aa 0b       	sbc	r26, r26
 ac4:	e0 e8       	ldi	r30, 0x80	; 128
 ac6:	fe ef       	ldi	r31, 0xFE	; 254
 ac8:	16 16       	cp	r1, r22
 aca:	17 06       	cpc	r1, r23
 acc:	e8 07       	cpc	r30, r24
 ace:	f9 07       	cpc	r31, r25
 ad0:	c0 f0       	brcs	.+48     	; 0xb02 <__fp_cmp+0x46>
 ad2:	12 16       	cp	r1, r18
 ad4:	13 06       	cpc	r1, r19
 ad6:	e4 07       	cpc	r30, r20
 ad8:	f5 07       	cpc	r31, r21
 ada:	98 f0       	brcs	.+38     	; 0xb02 <__fp_cmp+0x46>
 adc:	62 1b       	sub	r22, r18
 ade:	73 0b       	sbc	r23, r19
 ae0:	84 0b       	sbc	r24, r20
 ae2:	95 0b       	sbc	r25, r21
 ae4:	39 f4       	brne	.+14     	; 0xaf4 <__fp_cmp+0x38>
 ae6:	0a 26       	eor	r0, r26
 ae8:	61 f0       	breq	.+24     	; 0xb02 <__fp_cmp+0x46>
 aea:	23 2b       	or	r18, r19
 aec:	24 2b       	or	r18, r20
 aee:	25 2b       	or	r18, r21
 af0:	21 f4       	brne	.+8      	; 0xafa <__fp_cmp+0x3e>
 af2:	08 95       	ret
 af4:	0a 26       	eor	r0, r26
 af6:	09 f4       	brne	.+2      	; 0xafa <__fp_cmp+0x3e>
 af8:	a1 40       	sbci	r26, 0x01	; 1
 afa:	a6 95       	lsr	r26
 afc:	8f ef       	ldi	r24, 0xFF	; 255
 afe:	81 1d       	adc	r24, r1
 b00:	81 1d       	adc	r24, r1
 b02:	08 95       	ret

00000b04 <__fp_inf>:
 b04:	97 f9       	bld	r25, 7
 b06:	9f 67       	ori	r25, 0x7F	; 127
 b08:	80 e8       	ldi	r24, 0x80	; 128
 b0a:	70 e0       	ldi	r23, 0x00	; 0
 b0c:	60 e0       	ldi	r22, 0x00	; 0
 b0e:	08 95       	ret

00000b10 <__fp_nan>:
 b10:	9f ef       	ldi	r25, 0xFF	; 255
 b12:	80 ec       	ldi	r24, 0xC0	; 192
 b14:	08 95       	ret

00000b16 <__fp_pscA>:
 b16:	00 24       	eor	r0, r0
 b18:	0a 94       	dec	r0
 b1a:	16 16       	cp	r1, r22
 b1c:	17 06       	cpc	r1, r23
 b1e:	18 06       	cpc	r1, r24
 b20:	09 06       	cpc	r0, r25
 b22:	08 95       	ret

00000b24 <__fp_pscB>:
 b24:	00 24       	eor	r0, r0
 b26:	0a 94       	dec	r0
 b28:	12 16       	cp	r1, r18
 b2a:	13 06       	cpc	r1, r19
 b2c:	14 06       	cpc	r1, r20
 b2e:	05 06       	cpc	r0, r21
 b30:	08 95       	ret

00000b32 <__fp_round>:
 b32:	09 2e       	mov	r0, r25
 b34:	03 94       	inc	r0
 b36:	00 0c       	add	r0, r0
 b38:	11 f4       	brne	.+4      	; 0xb3e <__fp_round+0xc>
 b3a:	88 23       	and	r24, r24
 b3c:	52 f0       	brmi	.+20     	; 0xb52 <__fp_round+0x20>
 b3e:	bb 0f       	add	r27, r27
 b40:	40 f4       	brcc	.+16     	; 0xb52 <__fp_round+0x20>
 b42:	bf 2b       	or	r27, r31
 b44:	11 f4       	brne	.+4      	; 0xb4a <__fp_round+0x18>
 b46:	60 ff       	sbrs	r22, 0
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <__fp_round+0x20>
 b4a:	6f 5f       	subi	r22, 0xFF	; 255
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255
 b4e:	8f 4f       	sbci	r24, 0xFF	; 255
 b50:	9f 4f       	sbci	r25, 0xFF	; 255
 b52:	08 95       	ret

00000b54 <__fp_split3>:
 b54:	57 fd       	sbrc	r21, 7
 b56:	90 58       	subi	r25, 0x80	; 128
 b58:	44 0f       	add	r20, r20
 b5a:	55 1f       	adc	r21, r21
 b5c:	59 f0       	breq	.+22     	; 0xb74 <__fp_splitA+0x10>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	71 f0       	breq	.+28     	; 0xb7e <__fp_splitA+0x1a>
 b62:	47 95       	ror	r20

00000b64 <__fp_splitA>:
 b64:	88 0f       	add	r24, r24
 b66:	97 fb       	bst	r25, 7
 b68:	99 1f       	adc	r25, r25
 b6a:	61 f0       	breq	.+24     	; 0xb84 <__fp_splitA+0x20>
 b6c:	9f 3f       	cpi	r25, 0xFF	; 255
 b6e:	79 f0       	breq	.+30     	; 0xb8e <__fp_splitA+0x2a>
 b70:	87 95       	ror	r24
 b72:	08 95       	ret
 b74:	12 16       	cp	r1, r18
 b76:	13 06       	cpc	r1, r19
 b78:	14 06       	cpc	r1, r20
 b7a:	55 1f       	adc	r21, r21
 b7c:	f2 cf       	rjmp	.-28     	; 0xb62 <__fp_split3+0xe>
 b7e:	46 95       	lsr	r20
 b80:	f1 df       	rcall	.-30     	; 0xb64 <__fp_splitA>
 b82:	08 c0       	rjmp	.+16     	; 0xb94 <__fp_splitA+0x30>
 b84:	16 16       	cp	r1, r22
 b86:	17 06       	cpc	r1, r23
 b88:	18 06       	cpc	r1, r24
 b8a:	99 1f       	adc	r25, r25
 b8c:	f1 cf       	rjmp	.-30     	; 0xb70 <__fp_splitA+0xc>
 b8e:	86 95       	lsr	r24
 b90:	71 05       	cpc	r23, r1
 b92:	61 05       	cpc	r22, r1
 b94:	08 94       	sec
 b96:	08 95       	ret

00000b98 <__fp_zero>:
 b98:	e8 94       	clt

00000b9a <__fp_szero>:
 b9a:	bb 27       	eor	r27, r27
 b9c:	66 27       	eor	r22, r22
 b9e:	77 27       	eor	r23, r23
 ba0:	cb 01       	movw	r24, r22
 ba2:	97 f9       	bld	r25, 7
 ba4:	08 95       	ret

00000ba6 <__gesf2>:
 ba6:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_cmp>
 baa:	08 f4       	brcc	.+2      	; 0xbae <__gesf2+0x8>
 bac:	8f ef       	ldi	r24, 0xFF	; 255
 bae:	08 95       	ret

00000bb0 <__mulsf3>:
 bb0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__mulsf3x>
 bb4:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_round>
 bb8:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscA>
 bbc:	38 f0       	brcs	.+14     	; 0xbcc <__mulsf3+0x1c>
 bbe:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_pscB>
 bc2:	20 f0       	brcs	.+8      	; 0xbcc <__mulsf3+0x1c>
 bc4:	95 23       	and	r25, r21
 bc6:	11 f0       	breq	.+4      	; 0xbcc <__mulsf3+0x1c>
 bc8:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>
 bcc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_nan>
 bd0:	11 24       	eor	r1, r1
 bd2:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>

00000bd6 <__mulsf3x>:
 bd6:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_split3>
 bda:	70 f3       	brcs	.-36     	; 0xbb8 <__mulsf3+0x8>

00000bdc <__mulsf3_pse>:
 bdc:	95 9f       	mul	r25, r21
 bde:	c1 f3       	breq	.-16     	; 0xbd0 <__mulsf3+0x20>
 be0:	95 0f       	add	r25, r21
 be2:	50 e0       	ldi	r21, 0x00	; 0
 be4:	55 1f       	adc	r21, r21
 be6:	62 9f       	mul	r22, r18
 be8:	f0 01       	movw	r30, r0
 bea:	72 9f       	mul	r23, r18
 bec:	bb 27       	eor	r27, r27
 bee:	f0 0d       	add	r31, r0
 bf0:	b1 1d       	adc	r27, r1
 bf2:	63 9f       	mul	r22, r19
 bf4:	aa 27       	eor	r26, r26
 bf6:	f0 0d       	add	r31, r0
 bf8:	b1 1d       	adc	r27, r1
 bfa:	aa 1f       	adc	r26, r26
 bfc:	64 9f       	mul	r22, r20
 bfe:	66 27       	eor	r22, r22
 c00:	b0 0d       	add	r27, r0
 c02:	a1 1d       	adc	r26, r1
 c04:	66 1f       	adc	r22, r22
 c06:	82 9f       	mul	r24, r18
 c08:	22 27       	eor	r18, r18
 c0a:	b0 0d       	add	r27, r0
 c0c:	a1 1d       	adc	r26, r1
 c0e:	62 1f       	adc	r22, r18
 c10:	73 9f       	mul	r23, r19
 c12:	b0 0d       	add	r27, r0
 c14:	a1 1d       	adc	r26, r1
 c16:	62 1f       	adc	r22, r18
 c18:	83 9f       	mul	r24, r19
 c1a:	a0 0d       	add	r26, r0
 c1c:	61 1d       	adc	r22, r1
 c1e:	22 1f       	adc	r18, r18
 c20:	74 9f       	mul	r23, r20
 c22:	33 27       	eor	r19, r19
 c24:	a0 0d       	add	r26, r0
 c26:	61 1d       	adc	r22, r1
 c28:	23 1f       	adc	r18, r19
 c2a:	84 9f       	mul	r24, r20
 c2c:	60 0d       	add	r22, r0
 c2e:	21 1d       	adc	r18, r1
 c30:	82 2f       	mov	r24, r18
 c32:	76 2f       	mov	r23, r22
 c34:	6a 2f       	mov	r22, r26
 c36:	11 24       	eor	r1, r1
 c38:	9f 57       	subi	r25, 0x7F	; 127
 c3a:	50 40       	sbci	r21, 0x00	; 0
 c3c:	9a f0       	brmi	.+38     	; 0xc64 <__mulsf3_pse+0x88>
 c3e:	f1 f0       	breq	.+60     	; 0xc7c <__mulsf3_pse+0xa0>
 c40:	88 23       	and	r24, r24
 c42:	4a f0       	brmi	.+18     	; 0xc56 <__mulsf3_pse+0x7a>
 c44:	ee 0f       	add	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	bb 1f       	adc	r27, r27
 c4a:	66 1f       	adc	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	91 50       	subi	r25, 0x01	; 1
 c52:	50 40       	sbci	r21, 0x00	; 0
 c54:	a9 f7       	brne	.-22     	; 0xc40 <__mulsf3_pse+0x64>
 c56:	9e 3f       	cpi	r25, 0xFE	; 254
 c58:	51 05       	cpc	r21, r1
 c5a:	80 f0       	brcs	.+32     	; 0xc7c <__mulsf3_pse+0xa0>
 c5c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>
 c60:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>
 c64:	5f 3f       	cpi	r21, 0xFF	; 255
 c66:	e4 f3       	brlt	.-8      	; 0xc60 <__mulsf3_pse+0x84>
 c68:	98 3e       	cpi	r25, 0xE8	; 232
 c6a:	d4 f3       	brlt	.-12     	; 0xc60 <__mulsf3_pse+0x84>
 c6c:	86 95       	lsr	r24
 c6e:	77 95       	ror	r23
 c70:	67 95       	ror	r22
 c72:	b7 95       	ror	r27
 c74:	f7 95       	ror	r31
 c76:	e7 95       	ror	r30
 c78:	9f 5f       	subi	r25, 0xFF	; 255
 c7a:	c1 f7       	brne	.-16     	; 0xc6c <__mulsf3_pse+0x90>
 c7c:	fe 2b       	or	r31, r30
 c7e:	88 0f       	add	r24, r24
 c80:	91 1d       	adc	r25, r1
 c82:	96 95       	lsr	r25
 c84:	87 95       	ror	r24
 c86:	97 f9       	bld	r25, 7
 c88:	08 95       	ret

00000c8a <__tablejump2__>:
 c8a:	ee 0f       	add	r30, r30
 c8c:	ff 1f       	adc	r31, r31
 c8e:	05 90       	lpm	r0, Z+
 c90:	f4 91       	lpm	r31, Z
 c92:	e0 2d       	mov	r30, r0
 c94:	09 94       	ijmp

00000c96 <__adddi3_s8>:
 c96:	00 24       	eor	r0, r0
 c98:	a7 fd       	sbrc	r26, 7
 c9a:	00 94       	com	r0
 c9c:	2a 0f       	add	r18, r26
 c9e:	30 1d       	adc	r19, r0
 ca0:	40 1d       	adc	r20, r0
 ca2:	50 1d       	adc	r21, r0
 ca4:	60 1d       	adc	r22, r0
 ca6:	70 1d       	adc	r23, r0
 ca8:	80 1d       	adc	r24, r0
 caa:	90 1d       	adc	r25, r0
 cac:	08 95       	ret

00000cae <fwrite>:
 cae:	a0 e0       	ldi	r26, 0x00	; 0
 cb0:	b0 e0       	ldi	r27, 0x00	; 0
 cb2:	ed e5       	ldi	r30, 0x5D	; 93
 cb4:	f6 e0       	ldi	r31, 0x06	; 6
 cb6:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__prologue_saves__+0xc>
 cba:	5b 01       	movw	r10, r22
 cbc:	4a 01       	movw	r8, r20
 cbe:	79 01       	movw	r14, r18
 cc0:	d9 01       	movw	r26, r18
 cc2:	13 96       	adiw	r26, 0x03	; 3
 cc4:	2c 91       	ld	r18, X
 cc6:	21 ff       	sbrs	r18, 1
 cc8:	1d c0       	rjmp	.+58     	; 0xd04 <fwrite+0x56>
 cca:	c0 e0       	ldi	r28, 0x00	; 0
 ccc:	d0 e0       	ldi	r29, 0x00	; 0
 cce:	c8 15       	cp	r28, r8
 cd0:	d9 05       	cpc	r29, r9
 cd2:	d9 f0       	breq	.+54     	; 0xd0a <fwrite+0x5c>
 cd4:	8c 01       	movw	r16, r24
 cd6:	6c 01       	movw	r12, r24
 cd8:	ca 0c       	add	r12, r10
 cda:	db 1c       	adc	r13, r11
 cdc:	c8 01       	movw	r24, r16
 cde:	0c 15       	cp	r16, r12
 ce0:	1d 05       	cpc	r17, r13
 ce2:	71 f0       	breq	.+28     	; 0xd00 <fwrite+0x52>
 ce4:	0f 5f       	subi	r16, 0xFF	; 255
 ce6:	1f 4f       	sbci	r17, 0xFF	; 255
 ce8:	d7 01       	movw	r26, r14
 cea:	18 96       	adiw	r26, 0x08	; 8
 cec:	ed 91       	ld	r30, X+
 cee:	fc 91       	ld	r31, X
 cf0:	19 97       	sbiw	r26, 0x09	; 9
 cf2:	b7 01       	movw	r22, r14
 cf4:	dc 01       	movw	r26, r24
 cf6:	8c 91       	ld	r24, X
 cf8:	09 95       	icall
 cfa:	89 2b       	or	r24, r25
 cfc:	79 f3       	breq	.-34     	; 0xcdc <fwrite+0x2e>
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <fwrite+0x5c>
 d00:	21 96       	adiw	r28, 0x01	; 1
 d02:	e5 cf       	rjmp	.-54     	; 0xcce <fwrite+0x20>
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <fwrite+0x5e>
 d0a:	ce 01       	movw	r24, r28
 d0c:	cd b7       	in	r28, 0x3d	; 61
 d0e:	de b7       	in	r29, 0x3e	; 62
 d10:	ec e0       	ldi	r30, 0x0C	; 12
 d12:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__epilogue_restores__+0xc>

00000d16 <puts>:
 d16:	0f 93       	push	r16
 d18:	1f 93       	push	r17
 d1a:	cf 93       	push	r28
 d1c:	df 93       	push	r29
 d1e:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__iob+0x2>
 d22:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <__iob+0x3>
 d26:	23 81       	ldd	r18, Z+3	; 0x03
 d28:	21 ff       	sbrs	r18, 1
 d2a:	1b c0       	rjmp	.+54     	; 0xd62 <puts+0x4c>
 d2c:	8c 01       	movw	r16, r24
 d2e:	d0 e0       	ldi	r29, 0x00	; 0
 d30:	c0 e0       	ldi	r28, 0x00	; 0
 d32:	f8 01       	movw	r30, r16
 d34:	81 91       	ld	r24, Z+
 d36:	8f 01       	movw	r16, r30
 d38:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <__iob+0x2>
 d3c:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <__iob+0x3>
 d40:	db 01       	movw	r26, r22
 d42:	18 96       	adiw	r26, 0x08	; 8
 d44:	ed 91       	ld	r30, X+
 d46:	fc 91       	ld	r31, X
 d48:	19 97       	sbiw	r26, 0x09	; 9
 d4a:	88 23       	and	r24, r24
 d4c:	31 f0       	breq	.+12     	; 0xd5a <puts+0x44>
 d4e:	09 95       	icall
 d50:	89 2b       	or	r24, r25
 d52:	79 f3       	breq	.-34     	; 0xd32 <puts+0x1c>
 d54:	df ef       	ldi	r29, 0xFF	; 255
 d56:	cf ef       	ldi	r28, 0xFF	; 255
 d58:	ec cf       	rjmp	.-40     	; 0xd32 <puts+0x1c>
 d5a:	8a e0       	ldi	r24, 0x0A	; 10
 d5c:	09 95       	icall
 d5e:	89 2b       	or	r24, r25
 d60:	19 f0       	breq	.+6      	; 0xd68 <puts+0x52>
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	9f ef       	ldi	r25, 0xFF	; 255
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <puts+0x56>
 d68:	8d 2f       	mov	r24, r29
 d6a:	9c 2f       	mov	r25, r28
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	1f 91       	pop	r17
 d72:	0f 91       	pop	r16
 d74:	08 95       	ret

00000d76 <__prologue_saves__>:
 d76:	2f 92       	push	r2
 d78:	3f 92       	push	r3
 d7a:	4f 92       	push	r4
 d7c:	5f 92       	push	r5
 d7e:	6f 92       	push	r6
 d80:	7f 92       	push	r7
 d82:	8f 92       	push	r8
 d84:	9f 92       	push	r9
 d86:	af 92       	push	r10
 d88:	bf 92       	push	r11
 d8a:	cf 92       	push	r12
 d8c:	df 92       	push	r13
 d8e:	ef 92       	push	r14
 d90:	ff 92       	push	r15
 d92:	0f 93       	push	r16
 d94:	1f 93       	push	r17
 d96:	cf 93       	push	r28
 d98:	df 93       	push	r29
 d9a:	cd b7       	in	r28, 0x3d	; 61
 d9c:	de b7       	in	r29, 0x3e	; 62
 d9e:	ca 1b       	sub	r28, r26
 da0:	db 0b       	sbc	r29, r27
 da2:	0f b6       	in	r0, 0x3f	; 63
 da4:	f8 94       	cli
 da6:	de bf       	out	0x3e, r29	; 62
 da8:	0f be       	out	0x3f, r0	; 63
 daa:	cd bf       	out	0x3d, r28	; 61
 dac:	09 94       	ijmp

00000dae <__epilogue_restores__>:
 dae:	2a 88       	ldd	r2, Y+18	; 0x12
 db0:	39 88       	ldd	r3, Y+17	; 0x11
 db2:	48 88       	ldd	r4, Y+16	; 0x10
 db4:	5f 84       	ldd	r5, Y+15	; 0x0f
 db6:	6e 84       	ldd	r6, Y+14	; 0x0e
 db8:	7d 84       	ldd	r7, Y+13	; 0x0d
 dba:	8c 84       	ldd	r8, Y+12	; 0x0c
 dbc:	9b 84       	ldd	r9, Y+11	; 0x0b
 dbe:	aa 84       	ldd	r10, Y+10	; 0x0a
 dc0:	b9 84       	ldd	r11, Y+9	; 0x09
 dc2:	c8 84       	ldd	r12, Y+8	; 0x08
 dc4:	df 80       	ldd	r13, Y+7	; 0x07
 dc6:	ee 80       	ldd	r14, Y+6	; 0x06
 dc8:	fd 80       	ldd	r15, Y+5	; 0x05
 dca:	0c 81       	ldd	r16, Y+4	; 0x04
 dcc:	1b 81       	ldd	r17, Y+3	; 0x03
 dce:	aa 81       	ldd	r26, Y+2	; 0x02
 dd0:	b9 81       	ldd	r27, Y+1	; 0x01
 dd2:	ce 0f       	add	r28, r30
 dd4:	d1 1d       	adc	r29, r1
 dd6:	0f b6       	in	r0, 0x3f	; 63
 dd8:	f8 94       	cli
 dda:	de bf       	out	0x3e, r29	; 62
 ddc:	0f be       	out	0x3f, r0	; 63
 dde:	cd bf       	out	0x3d, r28	; 61
 de0:	ed 01       	movw	r28, r26
 de2:	08 95       	ret

00000de4 <_exit>:
 de4:	f8 94       	cli

00000de6 <__stop_program>:
 de6:	ff cf       	rjmp	.-2      	; 0xde6 <__stop_program>
